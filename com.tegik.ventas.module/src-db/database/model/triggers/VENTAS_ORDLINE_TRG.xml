<?xml version="1.0"?>
  <database name="TRIGGER VENTAS_ORDLINE_TRG">
    <trigger name="VENTAS_ORDLINE_TRG" table="VENTAS_ORDLINE_DETAIL" fires="before" insert="true" update="true" delete="false" foreach="row">
      <body><![CDATA[
v_respuesta VARCHAR(255);
v_tileoslab  VARCHAR(32);
v_issotrx    VARCHAR(1);
v_name VARCHAR(32);
v_asi VARCHAR(32);
v_asiTemp VARCHAR(32);
v_inventario NUMBER;
v_inventario2 NUMBER;
v_reservado NUMBER;
v_cambio NUMBER;
v_docstatus VARCHAR(10);
v_area NUMBER;
v_nomprod VARCHAR(255);
v_asi_des VARCHAR(255);
v_alto NUMBER;
v_ancho NUMBER;
v_product_id VARCHAR(32);
v_docstatus2 VARCHAR(60);
v_enviado NUMBER;
v_Max NUMBER;
v_X NUMBER;
CUR_ATRIBUTOS RECORD;
        
BEGIN
    
	SELECT ROUND(EM_DMPROD_HEIGHT,8) * ROUND(EM_DMPROD_WIDTH,8), VALUE, EM_DMPROD_TILEOSLAB INTO v_area, v_nomprod, v_tileoslab FROM M_PRODUCT WHERE M_PRODUCT_ID = (SELECT M_PRODUCT_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID);

	SELECT DESCRIPTION INTO v_asi_des FROM M_ATTRIBUTESETINSTANCE WHERE M_ATTRIBUTESETINSTANCE_ID = :NEW.M_ATTRIBUTESETINSTANCE_ID;

	SELECT M_PRODUCT_ID, EM_DMPROD_HEIGHT, EM_DMPROD_WIDTH INTO v_product_id, v_alto, v_ancho FROM M_PRODUCT WHERE M_PRODUCT_ID = (SELECT M_PRODUCT_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID);


	/*
	IF (v_tileoslab = 'Slab') THEN

		IF (:NEW.ANCHO IS NULL) THEN
			:NEW.ANCHO = 1;
		END IF;

		IF (:NEW.ALTO IS NULL) THEN
			:NEW.ALTO = 1;
		END IF;
		
		:NEW.MOVEMENTQTY = COALESCE(:NEW.ANCHO,1) * COALESCE(:NEW.ALTO,1);

	END IF;
	*/
	
	SELECT ISSOTRX INTO v_issotrx FROM C_ORDER WHERE C_ORDER_ID = (SELECT C_ORDER_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID);


	IF (v_issotrx = 'N') THEN

		/*
		IF (INSERTING) THEN
			SELECT ALMAC_CREALOTE(:NEW.M_PRODUCT_ID) INTO v_respuesta;
		
			IF (CHAR_LENGTH(v_respuesta) <> 32) THEN
				RAISE_APPLICATION_ERROR(-20000, v_respuesta) ;
				RETURN OLD;
			ELSE
				:NEW.M_ATTRIBUTESETINSTANCE_ID = v_respuesta;
			END IF;
		END IF;
		*/

	ELSE
		v_cambio = 0;
		SELECT DOCSTATUS INTO v_docstatus FROM C_ORDER WHERE C_ORDER_ID = (SELECT C_ORDER_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID);

		IF (INSERTING) THEN
			:NEW.FACTURADO = 'Y';
		END IF;

		IF (v_docstatus NOT IN ('IP', 'CO')) THEN
			IF v_docstatus NOT IN ('CL') THEN
			RAISE_APPLICATION_ERROR(-20000, 'Sólo se puede editar el detalle si la orden o la cotización están completadas');
			RETURN OLD;
			END IF;
		END IF;

		IF (UPPER(v_tileoslab) = 'TILE') THEN
			IF (v_area IS NULL) THEN
				RAISE_APPLICATION_ERROR(-20000, 'Las dimensiones del tile no están configuradas para el producto ' || v_nomprod) ;
				RETURN OLD;
			END IF;
	
			IF (UPDATING) THEN
				IF (ROUND(:NEW.QTY,8) % v_area > 0 OR ROUND(:NEW.QTY_FACTURAR,8) % v_area > 0) THEN
					RAISE_APPLICATION_ERROR(-20000, 'La cantidad configurada no es multiplo de ' || v_area) ;
					RETURN OLD;
				END IF;
			END IF;
		END IF;
		
		IF (UPDATING) THEN
			IF ((COALESCE(:NEW.ATRIBUTO,'0') <> COALESCE(:OLD.ATRIBUTO,'0') OR :NEW.M_ATTRIBUTESETINSTANCE_ID <> :OLD.M_ATTRIBUTESETINSTANCE_ID) AND :NEW.QTY_FACTURADO > 0) THEN
				RAISE_APPLICATION_ERROR(-20000, 'No se puede cambiar la mercancía porque ya ha sido facturada');
				RETURN OLD;
			END IF;
			
			IF (:OLD.ATRIBUTO <> :NEW.ATRIBUTO) THEN
				v_cambio = 1;
			END IF;
		END IF;
		
		IF (:NEW.ATRIBUTO IS NOT NULL) THEN

			IF (INSERTING OR v_cambio = 1) THEN

				SELECT COALESCE(PREFIX, '') || :NEW.ATRIBUTO || COALESCE(SUFFIX, '') INTO v_name FROM M_LOTCTL WHERE M_LOTCTL_ID IN (SELECT M_LOTCTL_ID FROM M_ATTRIBUTESET WHERE M_ATTRIBUTESET_ID IN (SELECT M_ATTRIBUTESET_ID FROM M_PRODUCT WHERE M_PRODUCT_ID = v_product_id));

				IF (v_name IS NULL) THEN
					RAISE_APPLICATION_ERROR(-20000, 'No se definió un conjunto de atributos para el producto') ;
				END IF;
			
				/*IF (v_tileoslab = 'Slab') THEN
					v_name = 'S-'||:NEW.ATRIBUTO;
				ELSE
					v_name = 'G-'||:NEW.ATRIBUTO;
				END IF;*/

				v_X = 0;
				v_asiTemp = NULL;
				v_Max = 0;

				FOR CUR_ATRIBUTOS IN (SELECT M_ATTRIBUTESETINSTANCE_ID FROM M_ATTRIBUTESETINSTANCE WHERE DESCRIPTION = v_name AND AD_CLIENT_ID = :NEW.AD_CLIENT_ID)
				LOOP
					v_X = v_X + 1;
					SELECT SUM(QTYONHAND), M_ATTRIBUTESETINSTANCE_ID INTO v_inventario2, v_asiTemp
					FROM M_STORAGE_DETAIL 
					WHERE M_PRODUCT_ID = (SELECT M_PRODUCT_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID) 
					AND M_LOCATOR_ID IN (SELECT M_LOCATOR_ID FROM M_LOCATOR WHERE M_WAREHOUSE_ID = (SELECT M_WAREHOUSE_ID FROM C_ORDER WHERE C_ORDER_ID = (SELECT C_ORDER_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID))) 
					AND M_STORAGE_DETAIL.M_ATTRIBUTESETINSTANCE_ID = CUR_ATRIBUTOS.M_ATTRIBUTESETINSTANCE_ID
					GROUP BY M_ATTRIBUTESETINSTANCE_ID;

					v_inventario2 = COALESCE(v_inventario2,0);

					IF (v_X = 1) THEN
						v_asi = v_asiTemp;
						v_Max = v_inventario2;
					ELSE
						IF (v_inventario2 > v_Max) THEN
							v_asi = v_asiTemp;
							v_Max = v_inventario2;
						END IF;
					END IF;
					
				END LOOP;
		
				--SELECT M_ATTRIBUTESETINSTANCE_ID INTO v_asi FROM M_ATTRIBUTESETINSTANCE WHERE DESCRIPTION = v_name AND AD_CLIENT_ID = NEW.AD_CLIENT_ID;
		
				IF (v_asi IS NULL) THEN
					RAISE_APPLICATION_ERROR(-20000, 'El numero de lote introducido no existe -- ' || COALESCE(v_name, 'x')) ;
					RETURN OLD;
				END IF;	
		
				:NEW.M_ATTRIBUTESETINSTANCE_ID = v_asi;
		
				SELECT SUM(QTYONHAND) INTO v_inventario
				FROM M_STORAGE_DETAIL 
				WHERE M_PRODUCT_ID = (SELECT M_PRODUCT_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID) 
				AND M_LOCATOR_ID IN (SELECT M_LOCATOR_ID FROM M_LOCATOR WHERE M_WAREHOUSE_ID = (SELECT M_WAREHOUSE_ID FROM C_ORDER WHERE C_ORDER_ID = (SELECT C_ORDER_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID))) 
				AND M_STORAGE_DETAIL.M_ATTRIBUTESETINSTANCE_ID = :NEW.M_ATTRIBUTESETINSTANCE_ID;
				
				v_inventario = COALESCE(v_inventario,0);
		
				SELECT SUM(QTY) INTO v_reservado FROM VENTAS_ORDLINE_DETAIL OLDD 
				INNER JOIN C_ORDERLINE OL ON OLDD.C_ORDERLINE_ID = OL.C_ORDERLINE_ID AND OLDD.M_ATTRIBUTESETINSTANCE_ID = :NEW.M_ATTRIBUTESETINSTANCE_ID
				INNER JOIN C_ORDER O ON O.C_ORDER_ID = OL.C_ORDER_ID AND O.DOCSTATUS IN ('IP', 'CO') AND O.M_WAREHOUSE_ID IN (SELECT M_WAREHOUSE_ID FROM C_ORDER WHERE C_ORDER_ID = (SELECT C_ORDER_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID))
				WHERE OLDD.VENTAS_ORDLINE_DETAIL_ID <> :NEW.VENTAS_ORDLINE_DETAIL_ID;
	
				
				SELECT SUM(MOVEMENTQTY) INTO v_enviado FROM M_INOUTLINE IOL
				INNER JOIN M_INOUT IO ON IO.M_INOUT_ID = IOL.M_INOUT_ID 
					AND IO.DOCSTATUS = 'CO'
					AND IOL.M_ATTRIBUTESETINSTANCE_ID = :NEW.M_ATTRIBUTESETINSTANCE_ID
					AND IO.ISSOTRX = 'Y'
				;
		
				v_inventario = v_inventario - (COALESCE(v_reservado,0) - COALESCE(v_enviado, 0));
		
				IF (v_tileoslab = 'Slab') THEN
					v_inventario = v_inventario;
				ELSE
					v_inventario = ROUND((v_inventario/v_area) - 0.5,0) * v_area;
				END IF;
		
				IF (v_inventario <= 0) THEN
					RAISE_APPLICATION_ERROR(-20000, 'No existe inventario disponible') ;
					RETURN OLD;
				ELSE
					:NEW.QTY = v_inventario;
					:NEW.QTY_FACTURAR = v_inventario;
					:NEW.QTY_FACTURADO = 0;
				END IF;
			END IF;

			IF (UPDATING) THEN
				IF (v_cambio = 0 AND :NEW.QTY <> :OLD.QTY) THEN
				
					SELECT SUM(QTYONHAND) INTO v_inventario
					FROM M_STORAGE_DETAIL 
					WHERE M_PRODUCT_ID = (SELECT M_PRODUCT_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID) 
					AND M_LOCATOR_ID IN (SELECT M_LOCATOR_ID FROM M_LOCATOR WHERE M_WAREHOUSE_ID = (SELECT M_WAREHOUSE_ID FROM C_ORDER WHERE C_ORDER_ID = (SELECT C_ORDER_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID))) 
					AND M_STORAGE_DETAIL.M_ATTRIBUTESETINSTANCE_ID = :NEW.M_ATTRIBUTESETINSTANCE_ID;
					
					v_inventario = COALESCE(v_inventario,0);
			
					SELECT SUM(QTY) INTO v_reservado FROM VENTAS_ORDLINE_DETAIL OLDD 
					INNER JOIN C_ORDERLINE OL ON OLDD.C_ORDERLINE_ID = OL.C_ORDERLINE_ID AND OLDD.M_ATTRIBUTESETINSTANCE_ID = :NEW.M_ATTRIBUTESETINSTANCE_ID
					INNER JOIN C_ORDER O ON O.C_ORDER_ID = OL.C_ORDER_ID AND O.DOCSTATUS IN ('IP', 'CO') AND O.M_WAREHOUSE_ID IN (SELECT M_WAREHOUSE_ID FROM C_ORDER WHERE C_ORDER_ID = (SELECT C_ORDER_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = :NEW.C_ORDERLINE_ID))
					WHERE OLDD.VENTAS_ORDLINE_DETAIL_ID <> :NEW.VENTAS_ORDLINE_DETAIL_ID;

					SELECT SUM(MOVEMENTQTY) INTO v_enviado FROM M_INOUTLINE IOL
					INNER JOIN M_INOUT IO ON IO.M_INOUT_ID = IOL.M_INOUT_ID 
						AND IO.DOCSTATUS = 'CO'
						AND IOL.M_ATTRIBUTESETINSTANCE_ID = :NEW.M_ATTRIBUTESETINSTANCE_ID
						AND IO.ISSOTRX = 'Y';
		
					v_inventario = v_inventario - (COALESCE(v_reservado,0) - COALESCE(v_enviado, 0));
					
					IF (v_tileoslab = 'Slab') THEN
						v_inventario = v_inventario;
					ELSE
						v_inventario = ROUND((v_inventario/v_area) - 0.5,0) * v_area;
					END IF;
	
					IF (:NEW.QTY > v_inventario) THEN
						RAISE_APPLICATION_ERROR(-20000, 'No existe inventario, atributo -- '  || v_asi_des || ' -- Inventario --' || v_inventario) ;
						RETURN OLD;
					END IF;
					
				END IF;
			END IF;

			
		END IF;

	END IF;

SELECT docstatus INTO v_docstatus2 FROM c_order
WHERE c_order_id IN (
		SELECT c_order_id FROM c_orderline 
		WHERE c_orderline_id =:NEW.c_orderline_id
			);
			

 
IF v_docstatus2='CL' THEN
:NEW.STATUS = 'TF';
ELSE
	IF (:NEW.QTY_FACTURAR > (:NEW.QTY - :NEW.QTY_FACTURADO)) THEN
		RAISE_APPLICATION_ERROR(-20000, 'No se puede facturar más de lo disponible') ;
	END IF;

	IF (:NEW.QTY_FACTURADO = 0) THEN
		:NEW.STATUS = 'L';
	END IF;

	IF (:NEW.QTY_FACTURADO > 0) THEN
		:NEW.STATUS = 'F';
	END IF;

	IF (:NEW.QTY_FACTURADO > 0 AND :NEW.QTY_FACTURADO >= :NEW.QTY) THEN
		:NEW.STATUS = 'TF';
	END IF;
END IF;	
	END VENTAS_ORDLINE_TRG
]]></body>
    </trigger>
  </database>
