<?xml version="1.0"?>
  <database name="FUNCTION VENTAS_CHK_STOCK">
    <function name="VENTAS_CHK_STOCK" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_order_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_Invoice_CreateReceipt.sql,v 1.2 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: Create Receipt (Shipment) From Invoice
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
    v_M_Locator_ID VARCHAR2(32);
    --
    v_DocStatus VARCHAR2(60) ;
    v_InOut_ID VARCHAR2(32);
    FINISH_PROCESS BOOLEAN:=false;
    v_disponible NUMBER;
    Cur_OrderLine RECORD;
    v_mensaje VARCHAR (150);
    v_cantidad NUMBER;
    v_totalfac NUMBER;
    v_cuenta NUMBER;
    v_cantidadreservada NUMBER;
	cur_reservas RECORD;
	v_salida VARCHAR(1);
	v_posicion NUMBER;
	v_cantidadseparada NUMBER;
	v_draft NUMBER;
	v_almacen NUMBER;
  BEGIN
    --  Update AD_PInstance
    IF (p_PInstance_ID IS NOT NULL) THEN
	    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
	    v_ResultStr:='PInstanceNotFound';
	    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
     END IF;
	  BEGIN --BODY
	    -- Get Parameters
	       v_ResultStr:='ReadingParameters';
	    FOR Cur_Parameter IN
	      (SELECT i.Record_ID,
		p.ParameterName,
		p.P_String,
		p.P_Number,
		p.P_Date
	      FROM AD_PInstance i
	      LEFT JOIN AD_PInstance_Para p
		ON i.AD_PInstance_ID=p.AD_PInstance_ID
	      WHERE i.AD_PInstance_ID=p_PInstance_ID
	      ORDER BY p.SeqNo
	      )
	    LOOP
	      v_Record_ID:=Cur_Parameter.Record_ID;
	    END LOOP; -- Get Parameter
	    -- Read Information from Record
    IF (p_order_id IS NOT NULL) THEN
	v_Record_ID = p_order_id;
    END IF;

    IF (p_order_id IS NULL AND p_PInstance_ID IS NULL) THEN
	RAISE_APPLICATION_ERROR(-20000, 'No hay datos') ;
    END IF;

    v_cuenta = 0;

    /*
	FOR Cur_OrderLine IN
    (SELECT * FROM C_ORDERLINE WHERE C_ORDER_ID = v_Record_ID)
    LOOP
    v_cuenta = v_cuenta + 1;
    SELECT COALESCE(SUM(SD.QTYONHAND + SD.PREQTYONHAND),0)
    INTO v_disponible
    FROM M_STORAGE_DETAIL SD 
    WHERE M_PRODUCT_ID = Cur_OrderLine.M_PRODUCT_ID
    AND M_LOCATOR_ID IN (SELECT M_LOCATOR_ID 
				FROM M_LOCATOR 
				WHERE M_WAREHOUSE_ID IN (SELECT M_WAREHOUSE_ID 
								FROM C_ORDER 
								WHERE C_ORDER_ID = v_Record_Id));

	v_cantidadseparada = 0;
        v_salida = 'N';

	FOR cur_reservas IN
	(SELECT row_number() OVER (ORDER BY o.em_ventas_fecha_espera) AS posicion,
	OL.QTYORDERED - OL.QTYDELIVERED as qty_reservada,
	OL.C_ORDERLINE_ID AS linea_orden
	FROM C_ORDER O
	INNER JOIN C_ORDERLINE OL ON O.C_ORDER_ID = OL.C_ORDER_ID 
			AND O.DOCSTATUS = 'CO' 
			AND O.ISSOTRX = 'Y' 
			AND OL.M_PRODUCT_ID = Cur_OrderLine.M_PRODUCT_ID 
			AND O.M_WAREHOUSE_ID = (SELECT M_WAREHOUSE_ID 
						FROM C_ORDER 
						WHERE C_ORDER_ID = v_Record_Id)
	WHERE OL.QTYORDERED - OL.QTYDELIVERED > 0)

	LOOP
		IF (cur_reservas.linea_orden = Cur_OrderLine.C_ORDERLINE_ID) THEN
			v_salida = 'Y';
			v_posicion = cur_reservas.posicion;
		ELSE 
			IF (v_salida = 'N') THEN
				v_cantidadseparada = v_cantidadseparada + cur_reservas.qty_reservada;
			END IF;
		END IF;

	END LOOP;

	SELECT SUM(QTYINVOICED) INTO v_draft FROM C_INVOICELINE IL INNER JOIN C_INVOICE I ON IL.C_INVOICE_ID = I.C_INVOICE_ID AND I.DOCSTATUS = 'DR' AND I.ISSOTRX = 'Y' WHERE C_ORDERLINE_ID = Cur_OrderLine.C_ORDERLINE_ID;

	v_draft = COALESCE(v_draft, 0);

	v_almacen = v_disponible;
        v_disponible = v_disponible - v_cantidadseparada;

    
    IF (v_disponible >= Cur_OrderLine.QtyOrdered - Cur_OrderLine.QtyInvoiced - v_draft) THEN
	v_mensaje := 'Se surtiran todas las unidades pedidas';
	v_cantidad = Cur_OrderLine.QtyOrdered - Cur_OrderLine.QtyInvoiced - v_draft;
    ELSE IF (v_disponible <= 0) THEN
	v_mensaje = 'No existe inventario disponible -- Te encuentras en el lugar ' || v_posicion || ' en la lista -- Inventario: ' || v_almacen || ' -- Separado: ' || v_cantidadseparada;
	v_cantidad = 0;
    ELSE IF (v_disponible > 0) THEN
	v_mensaje = 'Se surtirán solamente ' || v_disponible || ' unidades -- Te encuentras en el lugar ' || v_posicion || ' en la lista -- Inventario: ' || v_almacen || ' -- Separado: ' || v_cantidadseparada;
	v_cantidad = v_disponible - v_draft;
    END IF;		
    END IF;
    END IF;

    --UPDATE C_ORDERLINE SET EM_VENTAS_MENSAJE = v_mensaje, EM_VENTAS_QTYFACTURA = v_cantidad WHERE C_ORDERLINE_ID = Cur_OrderLine.C_ORDERLINE_ID;
    
    UPDATE C_ORDERLINE SET EM_VENTAS_MENSAJE = v_mensaje WHERE C_ORDERLINE_ID = Cur_OrderLine.C_ORDERLINE_ID;

    END LOOP;

    IF (v_cuenta = 0) THEN
	RAISE_APPLICATION_ERROR(-20000, 'La orden no cuenta con líneas para validar el inventario') ;
    END IF;

    SELECT COALESCE(SUM(EM_VENTAS_QTYFACTURAREAL * PRICEACTUAL * (1+RATE/100)),0) 
    INTO v_totalfac 
    FROM C_ORDERLINE 
    INNER JOIN C_TAX ON C_ORDERLINE.C_TAX_ID = C_TAX.C_TAX_ID 
    WHERE C_ORDER_ID = v_Record_Id;

    UPDATE C_ORDER SET EM_VENTAS_TOTALFACT = COALESCE(v_totalfac,0) WHERE C_ORDER_ID = v_Record_ID;

    SELECT DOCSTATUS INTO v_docStatus FROM C_ORDER WHERE C_ORDER_ID = v_Record_ID;

    IF (v_docStatus <> 'CO' AND v_docStatus <> 'IP') THEN
	UPDATE C_ORDERLINE SET EM_VENTAS_MENSAJE = 'Orden cerrada, anulada o reactivada', EM_VENTAS_QTYFACTURA = 0 WHERE C_ORDERLINE_ID = Cur_OrderLine.C_ORDERLINE_ID;
    END IF;
    
	*/

     --FINISH_PROCESS
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    IF (p_PInstance_ID IS NOT NULL) THEN
	AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, 'Validar las existencias en las líneas de la orden de venta');
    END IF;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF (p_PInstance_ID IS NOT NULL) THEN
	AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
	RETURN;
  END IF;
  RAISE v_ResultStr;
END VENTAS_CHK_STOCK
]]></body>
    </function>
  </database>
