<?xml version="1.0"?>
  <database name="FUNCTION VENTAS_CALBACKORDER">
    <function name="VENTAS_CALBACKORDER" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
 Cur_olventa RECORD;
 Cur_almacen RECORD;
 Cur_product RECORD;
 Cur_stuff RECORD;
 v_cant_almac NUMBER;--Cantidad para un producto y almacén específicos
 v_cant_trans NUMBER;--Cantidad en transito para un producto  específicos
 v_cant_pedida NUMBER;
 v_cant_apedir NUMBER;
 v_cant_disponible NUMBER;
 v_canttrans NUMBER;--variable temporal
 v_cantalmac NUMBER;--variable temporal

 
  BEGIN
    --  Update AD_PInstance
    IF (p_PInstance_ID IS NOT NULL) THEN
	    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
	    v_ResultStr:='PInstanceNotFound';
	    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
     END IF;
	  BEGIN --BODY
	    -- Get Parameters
	       v_ResultStr:='ReadingParameters';
	    FOR Cur_Parameter IN
	      (SELECT i.Record_ID,
		p.ParameterName,
		p.P_String,
		p.P_Number,
		p.P_Date,
		p.ad_client_id
	      FROM AD_PInstance i
	      LEFT JOIN AD_PInstance_Para p
		ON i.AD_PInstance_ID=p.AD_PInstance_ID
	      WHERE i.AD_PInstance_ID=p_PInstance_ID
	      ORDER BY p.SeqNo
	      )
	    LOOP
	      v_Record_ID:=Cur_Parameter.ad_client_id;
	    END LOOP; -- Get Parameter
	    -- Read Information from Record
SELECT ad_client_id INTO v_Record_ID FROM ad_pinstance WHERE ad_pinstance_ID=p_PInstance_ID;
DBMS_OUTPUT.PUT_LINE('CLIENTE: '||v_Record_ID) ;
--SE GENERA UNA IMAGEN DE ALMACEN POR PRODUCTO PARA PODER IR REDUCIENDO LA CANTIDAD  
DELETE FROM ventas_backorder_temp WHERE ad_client_id=v_Record_ID;

FOR Cur_almacen IN (
--QQQQQQQQQQQQQQQQQQQQQQQ
SELECT P.M_PRODUCT_ID,
  WH.M_WAREHOUSE_ID,

SUM(W.CANTIDAD) AS INVENTARIO,  SUM(X.RESERVADO), SUM(W.CANTIDAD - X.RESERVADO) AS DISPONIBLE
, SUM(X.ORDENADO), SUM(X.ORDENADO - X.RESERVADO) AS BACKORDER

FROM

(SELECT SD.AD_CLIENT_ID, SD.M_PRODUCT_ID, L.M_WAREHOUSE_ID,  SUM(QTYONHAND) AS CANTIDAD 
FROM
M_STORAGE_DETAIL SD
INNER JOIN M_LOCATOR L ON L.M_LOCATOR_ID = SD.M_LOCATOR_ID
GROUP BY SD.M_PRODUCT_ID, L.M_WAREHOUSE_ID, SD.AD_CLIENT_ID) W
INNER JOIN M_WAREHOUSE WH ON WH.M_WAREHOUSE_ID = W.M_WAREHOUSE_ID
INNER JOIN M_PRODUCT P ON W.M_PRODUCT_ID=P.M_PRODUCT_ID
INNER JOIN
(SELECT OL.M_PRODUCT_ID, O.M_WAREHOUSE_ID, COALESCE(SUM(OL.QTYORDERED - OL.QTYDELIVERED),0) AS ORDENADO,  COALESCE(SUM(A.QTY - OL.QTYDELIVERED),0) AS RESERVADO
FROM C_ORDERLINE OL
INNER JOIN C_ORDER O ON O.C_ORDER_ID = OL.C_ORDER_ID AND O.DOCSTATUS IN ('IP', 'CO')
INNER JOIN
(SELECT OL2.C_ORDERLINE_ID, SUM(COALESCE(OLDD.QTY,0)) AS QTY
FROM C_ORDERLINE OL2
LEFT JOIN VENTAS_ORDLINE_DETAIL OLDD ON OL2.C_ORDERLINE_ID = OLDD.C_ORDERLINE_ID
GROUP BY OL2.C_ORDERLINE_ID) A
ON OL.C_ORDERLINE_ID = A.C_ORDERLINE_ID
GROUP BY OL.M_PRODUCT_ID, O.M_WAREHOUSE_ID) X
ON W.M_PRODUCT_ID = X.M_PRODUCT_ID AND X.M_WAREHOUSE_ID = W.M_WAREHOUSE_ID

WHERE W.AD_CLIENT_ID IN (v_Record_ID)
GROUP BY P.M_PRODUCT_ID, WH.M_WAREHOUSE_ID

--QQQQQQQQQQQQQQQQQQQQQQ

)LOOP

	/*SELECT SUM(qtyonhand) INTO v_cantalmac
	FROM m_storage_detail 
	WHERE m_product_id=Cur_almacen.m_product_id
	AND m_locator_id IN (
				SELECT m_locator_id 
				FROM m_locator 
				WHERE m_warehouse_id=Cur_almacen.m_warehouse_id 
				LIMIT 1
				);
				*/
	SELECT  ad_client_id, ad_org_id INTO Cur_stuff FROM m_warehouse WHERE m_warehouse_id=Cur_almacen.m_warehouse_id;
	
	INSERT INTO ventas_backorder_temp(
		    ventas_backorder_temp_id, 
		    ad_client_id, 
		    ad_org_id, 
		    isactive, 
		    created, 
		    createdby, 
		    updated, 
		    updatedby,
		     m_warehouse_id, 
		     m_product_id, 
		    qty_ini, 
		    qty)
	    VALUES (
		    GET_UUID(), 
		    Cur_stuff.ad_client_id, 
		    Cur_stuff.ad_org_id, 
		    'Y',--isactive, 
		    now(),
		    '100', 
		    now(), 
		    '100',
		    Cur_almacen.m_warehouse_id, 
		    Cur_almacen.m_product_id, 
		    Cur_almacen.DISPONIBLE,--qty_ini, 
		    Cur_almacen.DISPONIBLE--qty
		    );

END LOOP;
 
--GENERAMOS UN ALMACEN EN TRANSITO
FOR Cur_product IN (
SELECT  ol.m_product_id
	FROM C_ORDER O
	INNER JOIN C_ORDERLINE OL ON O.C_ORDER_ID = OL.C_ORDER_ID 
			AND O.DOCSTATUS = 'CO' 
			AND O.ISSOTRX = 'Y' 
			AND ol.ad_client_id = v_Record_ID
	WHERE OL.QTYORDERED - OL.QTYDELIVERED > 0
	GROUP BY  ol.m_product_id
)LOOP

	SELECT SUM(cantidad) INTO v_canttrans 
	FROM compra_desgcont dc
	INNER JOIN compra_contenedor c ON dc.compra_contenedor_id=c.compra_contenedor_id
	LEFT JOIN compra_embarque e ON c.compra_embarque_id=e.compra_embarque_id
	LEFT JOIN c_invoice i ON c.compra_embarque_id=i.em_compra_embarque_id AND i.docstatus='CO'
	INNER JOIN c_orderline ol ON dc.c_orderline_id=ol.c_orderline_id
	INNER JOIN c_order o ON ol.c_order_id=o.c_order_id 
	LEFT JOIN m_inout io ON c.compra_contenedor_id=io.em_compra_contenedor_id AND io.docstatus IN ('DR','CO')
	LEFT JOIN compra_compterr cmptr ON io.em_compra_compterr_id=cmptr.compra_compterr_id
	INNER JOIN m_product p ON ol.m_product_id=p.m_product_id AND p.m_product_id=Cur_product.m_product_id
	WHERE  o.docstatus='CO' 
	AND COALESCE(io.docstatus,'NA') NOT IN ('CO','VO');

	SELECT ad_client_id, ad_org_id INTO Cur_stuff FROM m_product WHERE m_product_id=Cur_product.m_product_id;

	INSERT INTO ventas_backorder_temp(
		    ventas_backorder_temp_id, 
		    ad_client_id, 
		    ad_org_id, 
		    isactive, 
		    created, 
		    createdby, 
		    updated, 
		    updatedby, 
		     m_product_id, 
		    qty_ini, 
		    qty,
		    istransito)
	    VALUES (
		    GET_UUID(), 
		    Cur_stuff.ad_client_id, 
		    Cur_stuff.ad_org_id, 
		    'Y',--isactive, 
		    now(), 
		    '100', 
		    now(), 
		    '100',
		    Cur_product.m_product_id, 
		    v_canttrans,--qty_ini, 
		    v_canttrans,--qty
		    'Y' 
		    );


END LOOP;


--END SE GENERA UNA IMAGEN DE ALMACEN POR PRODUCTO PARA PODER IR REDUCIENDO LA CANTIDAD  

DELETE FROM ventas_sugerido_temp WHERE ad_client_id=v_Record_ID;
--RECORRE LAS PIEZAS RESERVADAS
FOR Cur_olventa IN (


SELECT row_number() OVER (ORDER BY o.em_ventas_fecha_espera) AS posicion,
	COALESCE(X.RESERVADO,0) as qty_reservada,
	o.m_warehouse_id,
	o.c_bpartner_id,
	ol.*
	FROM C_ORDER O
	INNER JOIN C_ORDERLINE OL ON O.C_ORDER_ID = OL.C_ORDER_ID 
			AND O.DOCSTATUS = 'CO' 
			AND O.ISSOTRX = 'Y'  
			AND ol.ad_client_id = v_Record_ID
	LEFT  JOIN
	(SELECT OL2.M_PRODUCT_ID, O2.M_WAREHOUSE_ID, COALESCE(SUM(OL2.QTYORDERED - OL2.QTYDELIVERED),0) AS ORDENADO,  
		COALESCE(SUM(A.QTY - OL2.QTYDELIVERED),0)
		 AS RESERVADO
		FROM C_ORDERLINE OL2
		INNER JOIN C_ORDER O2 ON O2.C_ORDER_ID = OL2.C_ORDER_ID AND O2.DOCSTATUS IN ('IP', 'CO')
		INNER JOIN
		(SELECT OL3.C_ORDERLINE_ID, SUM(OLDD.QTY) AS QTY
		FROM C_ORDERLINE OL3
		INNER JOIN VENTAS_ORDLINE_DETAIL OLDD ON OL3.C_ORDERLINE_ID = OLDD.C_ORDERLINE_ID
		GROUP BY OL3.C_ORDERLINE_ID) A
		ON OL2.C_ORDERLINE_ID = A.C_ORDERLINE_ID
	GROUP BY OL2.M_PRODUCT_ID, O2.M_WAREHOUSE_ID) X
	ON OL.M_PRODUCT_ID = X.M_PRODUCT_ID AND O.M_WAREHOUSE_ID = X.M_WAREHOUSE_ID
	WHERE OL.QTYORDERED - OL.QTYDELIVERED > 0
)LOOP

	SELECT SUM(COALESCE(qty,0)) INTO v_cant_almac 
	FROM ventas_backorder_temp 
	WHERE m_product_id=Cur_olventa.m_product_id
	AND m_warehouse_id=Cur_olventa.m_warehouse_id
	AND istransito='N'
	AND ad_client_id=v_Record_ID
	LIMIT 1;
	SELECT SUM(COALESCE(qty,0)) INTO v_cant_trans 
	FROM ventas_backorder_temp 
	WHERE m_product_id=Cur_olventa.m_product_id
	AND istransito='Y'
	AND ad_client_id=v_Record_ID
	LIMIT 1;

	v_cant_disponible:=v_cant_almac+v_cant_trans;

	IF Cur_olventa.qty_reservada<v_cant_almac THEN
	v_cant_apedir:=0;
	
	DBMS_OUTPUT.PUT_LINE('Cur_olventa.qty_reservada<v_cant_almac: '||Cur_olventa.qty_reservada||'<'||v_cant_almac) ;
	
	UPDATE ventas_backorder_temp SET qty=(v_cant_almac-Cur_olventa.qty_reservada)
	WHERE m_product_id=Cur_olventa.m_product_id
	AND m_warehouse_id=Cur_olventa.m_warehouse_id
	AND istransito='N'
	AND ad_client_id=v_Record_ID;
		
	ELSE

	UPDATE ventas_backorder_temp SET qty=0
	WHERE m_product_id=Cur_olventa.m_product_id
	AND m_warehouse_id=Cur_olventa.m_warehouse_id
	AND istransito='N'
	AND ad_client_id=v_Record_ID;

		IF Cur_olventa.qty_reservada < (v_cant_almac+v_cant_trans) THEN 
		v_cant_apedir:=0;

		DBMS_OUTPUT.PUT_LINE('Cur_olventa.qty_reservada < (v_cant_almac+v_cant_trans): '||Cur_olventa.qty_reservada||'<'||v_cant_almac+v_cant_trans) ;
		
		UPDATE ventas_backorder_temp SET qty=(v_cant_almac+v_cant_trans-Cur_olventa.qty_reservada)
		WHERE m_product_id=Cur_olventa.m_product_id
		AND istransito='Y'
		AND ad_client_id=v_Record_ID;
		
		ELSE 
		v_cant_apedir:=Cur_olventa.qty_reservada-(v_cant_almac+v_cant_trans);

		DBMS_OUTPUT.PUT_LINE('Cur_olventa.qty_reservada > (v_cant_almac+v_cant_trans): '||Cur_olventa.qty_reservada||'<'||v_cant_almac+v_cant_trans) ;
		
		UPDATE ventas_backorder_temp SET qty=0
		WHERE m_product_id=Cur_olventa.m_product_id
		AND istransito='Y' 
		AND ad_client_id=v_Record_ID;
		
		END IF;

	END IF;
DBMS_OUTPUT.PUT_LINE('v_cant_apedir: '||v_cant_apedir);
IF v_cant_apedir>0 THEN	
INSERT INTO ventas_sugerido_temp(
			ventas_sugerido_temp_id, 
			ad_client_id, 
			ad_org_id, 
			isactive, 
			created, 
			createdby, 
			updated, 
			updatedby, 
			m_warehouse_id,
			m_product_id, 
			c_orderline_id, 
			c_bpartner_id, 
			qty)
    VALUES (		GET_UUID(), 
			Cur_olventa.ad_client_id, 
			Cur_olventa.ad_org_id, 
			Cur_olventa.isactive, 
			Cur_olventa.created, 
			Cur_olventa.createdby, 
			Cur_olventa.updated, 
			Cur_olventa.updatedby, 
			Cur_olventa.m_warehouse_id,
			Cur_olventa.m_product_id, 
			Cur_olventa.c_orderline_id, 
			Cur_olventa.c_bpartner_id, 
			v_cant_apedir);

END IF;
END LOOP;--FIN RECORRE LAS PIEZAS RESERVADAS

AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, 'Líneas de sugerido generadas correctamente');
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  IF (p_PInstance_ID IS NOT NULL) THEN
	AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
	RETURN;
  END IF;
  RAISE v_ResultStr;
END VENTAS_CALBACKORDER
]]></body>
    </function>
  </database>
