<?xml version="1.0"?>
  <database name="FUNCTION PROD_CREARCOSTOS">
    <function name="PROD_CREARCOSTOS" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_Production RECORD;
    Cur_Employee RECORD;
    Cur_Indirect RECORD;
    Cur_Machine RECORD;
    -- Parameter Variables
    FINISH_PROCESS BOOLEAN:=false;
    v_cuenta NUMBER;
    v_defaultexists NUMBER;
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
    END LOOP; -- Get Parameter
    -- Read Information from Record
    v_ResultStr:='Reading Record';

SELECT * INTO Cur_Production FROM m_production WHERE m_production_id=v_Record_ID LIMIT 1;
SELECT COUNT(*) INTO v_defaultexists FROM ma_costcenter  WHERE em_prod_isstardard='Y' AND ad_client_id=Cur_Production.ad_client_id; 
IF v_defaultexists = 0 THEN
	 RAISE_APPLICATION_ERROR(-20000, 'Debe existir un Centro de Costos default.') ;
END IF;
FOR Cur_Employee IN
      (SELECT cce.*
      FROM ma_costcenter_employee cce
      INNER JOIN ma_costcenter_version ccv ON cce.ma_costcenter_version_id=ccv.ma_costcenter_version_id
      INNER JOIN ma_costcenter cc ON ccv.ma_costcenter_id=cc.ma_costcenter_id
      WHERE cc.em_prod_isstardard='Y' AND cc.ad_client_id=Cur_Production.ad_client_id 
      AND cc.em_prod_isstardard='Y'
      )
    LOOP
  INSERT INTO prod_production_costs(
            prod_production_costs_id, created, createdby, updated, updatedby, 
            ad_client_id, ad_org_id, isactive, c_salary_category_id, ma_indirect_cost_id, 
            ma_machine_id, quantity, cost_type, m_production_id)
    VALUES (GET_UUID(),--prod_production_costs_id, 
	    now(),--created, 
	    Cur_Production.createdby, 
	    now(),--updated, 
	    Cur_Production.updatedby, 
            Cur_Production.ad_client_id, 
            Cur_Production.ad_org_id, 
            Cur_Production.isactive, 
            Cur_Employee.c_salary_category_id, 
            NULL,--ma_indirect_cost_id, 
            NULL,--ma_machine_id, 
            Cur_Employee.quantity, 
            'E',--cost_type, 
            Cur_Production.m_production_id);
    END LOOP; 
    FOR Cur_Indirect IN
      (SELECT cci.*
      FROM ma_costcenter_ic cci
      INNER JOIN ma_costcenter_version ccv ON cci.ma_costcenter_version_id=ccv.ma_costcenter_version_id
      INNER JOIN ma_costcenter cc ON ccv.ma_costcenter_id=cc.ma_costcenter_id
      WHERE cc.em_prod_isstardard='Y' AND cc.ad_client_id=Cur_Production.ad_client_id 
      AND cc.em_prod_isstardard='Y'
      )
    LOOP
  INSERT INTO prod_production_costs(
            prod_production_costs_id, created, createdby, updated, updatedby, 
            ad_client_id, ad_org_id, isactive, c_salary_category_id, ma_indirect_cost_id, 
            ma_machine_id, quantity, cost_type, m_production_id)
    VALUES (GET_UUID(),--prod_production_costs_id, 
	    now(),--created, 
	    Cur_Production.createdby, 
	    now(),--updated, 
	    Cur_Production.updatedby, 
            Cur_Production.ad_client_id, 
            Cur_Production.ad_org_id, 
            Cur_Production.isactive, 
            NULL,--c_salary_category_id, 
            Cur_Indirect.ma_indirect_cost_id, 
            NULL,--ma_machine_id, 
            NULL,--Cur_Employee.quantity, 
            'I',--cost_type, 
            Cur_Production.m_production_id);


    END LOOP; 
    FOR Cur_Machine IN
      (SELECT ccm.*
      FROM ma_costcenter_machine ccm
      INNER JOIN ma_costcenter_version ccv ON ccm.ma_costcenter_version_id=ccv.ma_costcenter_version_id
      INNER JOIN ma_costcenter cc ON ccv.ma_costcenter_id=cc.ma_costcenter_id
      WHERE cc.em_prod_isstardard='Y' AND cc.ad_client_id=Cur_Production.ad_client_id 
      AND cc.em_prod_isstardard='Y'
      )
    LOOP
  INSERT INTO prod_production_costs(
            prod_production_costs_id, created, createdby, updated, updatedby, 
            ad_client_id, ad_org_id, isactive, c_salary_category_id, ma_indirect_cost_id, 
            ma_machine_id, quantity, cost_type, m_production_id)
    VALUES (GET_UUID(),--prod_production_costs_id, 
	    now(),--created, 
	    Cur_Production.createdby, 
	    now(),--updated, 
	    Cur_Production.updatedby, 
            Cur_Production.ad_client_id, 
            Cur_Production.ad_org_id, 
            Cur_Production.isactive, 
            NULL,--c_salary_category_id, 
            NULL,--ma_indirect_cost_id, 
            Cur_Machine.ma_machine_id, 
            Cur_Machine.use,--quantity, 
            'M',--cost_type, 
            Cur_Production.m_production_id);


    END LOOP; 
  
     --FINISH_PROCESS
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, 'Se han creado los costos correspondientes.');
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END PROD_CREARCOSTOS
]]></body>
    </function>
  </database>
