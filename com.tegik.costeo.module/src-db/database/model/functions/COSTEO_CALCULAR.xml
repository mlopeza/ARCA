<?xml version="1.0"?>
  <database name="FUNCTION COSTEO_CALCULAR">
    <function name="COSTEO_CALCULAR" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2009 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(120000):='';
  v_Result NUMBER:=1;
  v_Message VARCHAR2(2000000):='';
  v_MessageCount NUMBER:=0;
  v_Record_ID VARCHAR2(32);
  v_Date DATE;
  v_Qty NUMBER;
  v_Cost NUMBER;
  v_User VARCHAR2(32);
  v_Price NUMBER;
  v_DateOld DATE;
  v_MinDateCosting DATE;
  v_FirstIteration BOOLEAN;
  v_CheckResultStr VARCHAR2(1200000):='';
  v_CumQty NUMBER;
  v_Processed VARCHAR2(60) ;
  v_count NUMBER;
  v_Deleted NUMBER;
  v_ProductOld VARCHAR2(32);
  v_CostNew NUMBER;
  v_PriceNew NUMBER;
    /*Variables agregadas por Carlos Salinas*/
  v_totalFacturas NUMBER;
  v_cantidadPiezas NUMBER;
  v_costosIndirectos NUMBER;
  v_indirectosAcumulado NUMBER;
  v_PrecioOriginal NUMBER;
  CUR_INDIRECTOS RECORD;
  v_Porcentaje NUMBER;
  v_totalLinea NUMBER;
  v_dineroFactura NUMBER;
  v_dineroFacturaSTC NUMBER;
  v_FactorIndirectos NUMBER;
  v_costingID VARCHAR(32);
  v_maxDateTo DATE;
  /*Variables agregadas por Carlos Salinas*/
  v_Client VARCHAR2(32);
  v_BaseCurrency VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    Cur_InOutLine RECORD;
    Cur_ProdCost RECORD;
    Cur_PriceList RECORD;
    Cur_ManualCost RECORD;
    Cur_Docs RECORD;
    Cur_OldCost RECORD;
    v_rowcount NUMBER;
  BEGIN
    v_Qty:=0;
    v_Cost:=0;
    v_Price:=0;
    v_CumQty:=0;
    v_ProductOld:='0';
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    --  Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        i.AD_Client_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_User:=Cur_Parameter.AD_User_ID;
      v_Client:=Cur_Parameter.AD_Client_ID;
    END LOOP; --  Get Parameter
    SELECT AD_CLIENT.C_CURRENCY_ID 
      INTO v_BaseCurrency
      FROM AD_CLIENT
      WHERE AD_CLIENT.AD_CLIENT_ID = v_Client;

    -- BEGIN CHECK IF COST USED TO POST A DOCUMENT
    -- If a document has been posted, and in the entry the costing has been used to calculate any amount,
    -- process is not allowed to be launched.
    SELECT MIN(DATEFROM)
    INTO v_MinDateCosting
    FROM M_COSTING
    WHERE ISPERMANENT='N'
      AND ISMANUAL='N'
      AND COSTTYPE='AV'
      AND ISPRODUCTION = 'N'
      AND AD_CLIENT_ID = v_Client;
    --RAISE NOTICE '%', 'ResultSTR-1: ' || v_ResultStr;
    v_CheckResultStr := '';
    SELECT MAX(MOVEMENTDATE) INTO v_Date FROM M_MOVEMENT WHERE AD_CLIENT_ID=v_Client AND POSTED='Y';
    IF (v_MinDateCosting <= v_Date) THEN
      v_FirstIteration:=TRUE;
      IF (COALESCE(length(v_CheckResultStr),0) > 0) THEN v_CheckResultStr:=v_CheckResultStr || '<br/>'; END IF;
      v_CheckResultStr:=v_CheckResultStr || '@Oneormore@ @MaterialMovement@ @PostedUsingCost@ @SOS_DOCUMENTNO@ ';
      FOR Cur_Docs IN
      (
      SELECT DISTINCT DOCUMENTNO
      FROM M_MOVEMENT
      WHERE AD_CLIENT_ID=v_Client AND POSTED='Y'
        AND MOVEMENTDATE > TO_DATE(v_MinDateCosting)
      ORDER BY DOCUMENTNO
      )
      LOOP
        IF (v_FirstIteration) THEN
          v_FirstIteration:=FALSE;
        ELSE
          v_CheckResultStr := v_CheckResultStr || ', ';
        END IF;
        v_CheckResultStr := v_CheckResultStr || Cur_Docs.DOCUMENTNO;
      END LOOP;
      v_CheckResultStr:=v_CheckResultStr || '.';
    END IF;

    --RAISE NOTICE '%', 'ResultSTR-2: ' || v_ResultStr;

    SELECT MAX(MOVEMENTDATE) INTO v_Date FROM M_INVENTORY WHERE AD_CLIENT_ID=v_Client AND POSTED='Y';
    IF (v_MinDateCosting <= v_Date) THEN
      v_FirstIteration:=TRUE;
      IF (COALESCE(length(v_CheckResultStr),0) > 0) THEN v_CheckResultStr:=v_CheckResultStr || '<br/>'; END IF;
      v_CheckResultStr:=v_CheckResultStr || '@Oneormore@ @MaterialInventory@ @PostedUsingCost@ @Name@ ';
      FOR Cur_Docs IN
      (
      SELECT DISTINCT I.NAME AS INVENTORY, W.NAME AS WAREHOUSE
      FROM M_INVENTORY I, M_WAREHOUSE W
      WHERE I.M_WAREHOUSE_ID = W.M_WAREHOUSE_ID
        AND I.AD_CLIENT_ID=v_Client AND I.POSTED='Y'
        AND I.MOVEMENTDATE > TO_DATE(v_MinDateCosting)
      ORDER BY I.NAME, W.NAME
      )
      LOOP
        IF (v_FirstIteration) THEN
          v_FirstIteration:=FALSE;
        ELSE
          v_CheckResultStr := v_CheckResultStr || ', ';
        END IF;
        v_CheckResultStr := v_CheckResultStr || Cur_Docs.INVENTORY || '(@Warehouse@ ' || Cur_Docs.WAREHOUSE || ')';
      END LOOP;
      v_CheckResultStr:=v_CheckResultStr || '.';
    END IF;

   -- RAISE NOTICE '%', 'ResultSTR-3: ' || v_ResultStr;

    SELECT MAX(MOVEMENTDATE) INTO v_Date FROM M_PRODUCTION WHERE AD_CLIENT_ID=v_Client AND POSTED='Y';
    IF (v_MinDateCosting <= v_Date) THEN
      v_FirstIteration:=TRUE;
      IF (COALESCE(length(v_CheckResultStr),0) > 0) THEN v_CheckResultStr:=v_CheckResultStr || '<br/>'; END IF;
      v_CheckResultStr:=v_CheckResultStr || '@Oneormore@ @MaterialProduction@ @PostedUsingCost@ @SOS_DOCUMENTNO@ ';
      FOR Cur_Docs IN
      (
      SELECT DISTINCT DOCUMENTNO
      FROM M_PRODUCTION
      WHERE AD_CLIENT_ID=v_Client AND POSTED='Y'
        AND MOVEMENTDATE > TO_DATE(v_MinDateCosting)
      ORDER BY DOCUMENTNO
      )
      LOOP
        IF (v_FirstIteration) THEN
          v_FirstIteration:=FALSE;
        ELSE
          v_CheckResultStr := v_CheckResultStr || ', ';
        END IF;
        v_CheckResultStr := v_CheckResultStr || Cur_Docs.DOCUMENTNO;
      END LOOP;
      v_CheckResultStr:=v_CheckResultStr || '.';
    END IF;

    --RAISE NOTICE '%', 'ResultSTR-4: ' || v_ResultStr;

    SELECT MAX(DATEACCT) INTO v_Date FROM M_INOUT WHERE ISSOTRX='N' AND AD_CLIENT_ID=v_Client AND POSTED='Y';
    IF (v_MinDateCosting <= v_Date) THEN
      v_FirstIteration:=TRUE;
      IF (COALESCE(length(v_CheckResultStr),0) > 0) THEN v_CheckResultStr:=v_CheckResultStr || '<br/>'; END IF;
      v_CheckResultStr:=v_CheckResultStr || '@Oneormore@ @MaterialReceipt@ @PostedUsingCost@ @SOS_DOCUMENTNO@ ';
      FOR Cur_Docs IN
      (
      SELECT DISTINCT DOCUMENTNO
      FROM M_INOUT
      WHERE ISSOTRX='N' 
        AND AD_CLIENT_ID=v_Client AND POSTED='Y'
        AND DATEACCT > TO_DATE(v_MinDateCosting)
      ORDER BY DOCUMENTNO
      )
      LOOP
        IF (CHAR_LENGTH(v_CheckResultStr) < 1900)
        THEN
		IF (v_FirstIteration) THEN
		  v_FirstIteration:=FALSE;
		ELSE
		  v_CheckResultStr := v_CheckResultStr || ', ';
		END IF;
		v_CheckResultStr := v_CheckResultStr || Cur_Docs.DOCUMENTNO;
	END IF;
      END LOOP;
      v_CheckResultStr:=v_CheckResultStr || '.';
    END IF;

    --RAISE NOTICE '%', 'ResultSTR-5: ' || v_ResultStr;


    SELECT MAX(IO.DATEACCT) INTO v_Date FROM M_MATCHINV M, M_INOUTLINE IOL, M_INOUT IO
    WHERE M.AD_CLIENT_ID=v_Client AND M.POSTED='Y'
      AND IOL.M_INOUTLINE_ID = M.M_INOUTLINE_ID AND IO.M_INOUT_ID = IOL.M_INOUT_ID;

    IF (v_MinDateCosting <= v_Date) THEN
      v_FirstIteration:=TRUE;
      IF (COALESCE(length(v_CheckResultStr),0) > 0) THEN v_CheckResultStr:=v_CheckResultStr || '<br/>'; END IF;
      v_CheckResultStr:=v_CheckResultStr || '@Oneormore@ @MatchedInvoices@ @PostedUsingCost@ @Date@ ';
      FOR Cur_Docs IN
      (
      SELECT DISTINCT IO.DATEORDERED, I.DOCUMENTNO
      FROM M_MATCHINV M, M_INOUTLINE IOL, M_INOUT IO, C_INVOICE I, C_INVOICELINE IL
      WHERE M.AD_CLIENT_ID=v_Client AND M.POSTED='Y'
        AND IL.C_INVOICELINE_ID = M.C_INVOICELINE_ID
        AND I.C_INVOICE_ID = IL.C_INVOICE_ID
        AND IOL.M_INOUTLINE_ID = M.M_INOUTLINE_ID AND IO.M_INOUT_ID = IOL.M_INOUT_ID
        AND IO.DATEACCT > TO_DATE(v_MinDateCosting)
      ORDER BY IO.DATEORDERED, I.DOCUMENTNO
      )
      LOOP

        IF (v_FirstIteration) THEN
          v_FirstIteration:=FALSE;
        ELSE
          v_CheckResultStr := v_CheckResultStr || ', ';
        END IF;
        v_CheckResultStr := v_CheckResultStr || Cur_Docs.DATEORDERED || ' (' || '@Invoice@ @SOS_DOCUMENTNO@' || Cur_Docs.DOCUMENTNO || ')';
      END LOOP;
      v_CheckResultStr:=v_CheckResultStr || '.';
    END IF;

    IF (COALESCE(length(v_CheckResultStr),0) > 0) THEN
      RAISE_APPLICATION_ERROR(-20000, v_CheckResultStr);
    END IF;
    -- END CHECK IF COST USED TO POST A DOCUMENT


    DELETE
    FROM M_COSTING
    WHERE ISPERMANENT='N'
      AND ISMANUAL='N'
      AND COSTTYPE='AV'
      AND ISPRODUCTION = 'N'
      AND AD_CLIENT_ID = v_Client;
    v_rowcount:=SQL%ROWCOUNT;
    v_Deleted:=v_Deleted + v_rowcount;
    v_rowcount:=SQL%ROWCOUNT;
    --RAISE NOTICE '%','  deleted=' || v_rowcount ;
    --RECALCULATE THE DATETO OF MANUAL COSTS
    FOR Cur_ManualCost IN
      (SELECT M_COSTING_ID, M_PRODUCT_ID, DATEFROM
       FROM M_COSTING
       WHERE AD_CLIENT_ID = v_Client
       ORDER BY M_PRODUCT_ID, DATEFROM DESC) LOOP
      IF (v_ProductOld <> Cur_ManualCost.M_PRODUCT_ID) THEN
        v_Date := TO_DATE('31-12-9999', 'DD-MM-YYYY');
      END IF;
      UPDATE M_COSTING
      SET DATETO = v_date,
      Updated=now(),
      UpdatedBy=v_User
      WHERE M_COSTING_ID = Cur_ManualCost.M_Costing_ID;
      v_Date := cur_manualcost.DATEFROM;
      v_ProductOld := cur_manualcost.M_PRODUCT_ID;
    END LOOP;
    v_ProductOld:='0';
    v_DateOld:=TO_DATE('01-01-1900', 'DD-MM-YYYY') ;
    FOR Cur_InOutLine IN
      (SELECT M_INOUTLINE.M_INOUTLINE_ID, M_INOUTLINE.MOVEMENTQTY, M_PRODUCT.M_PRODUCT_ID, M_PRODUCT.VALUE AS PRODUCT_VALUE, M_PRODUCT.NAME AS PRODUCT_NAME, M_INOUT.MOVEMENTDATE,
        M_INOUTLINE.AD_CLIENT_ID, M_INOUTLINE.AD_ORG_ID, M_INOUT.C_BPARTNER_ID, C_BPARTNER.NAME AS BPARTNER_NAME, C_INVOICELINE.PRICEACTUAL, C_INVOICE.C_CURRENCY_ID, C_INVOICE.dateinvoiced
      FROM M_INOUT
		INNER JOIN M_INOUTLINE ON M_INOUT.M_INOUT_ID=M_INOUTLINE.M_INOUT_ID
		INNER JOIN M_PRODUCT ON M_INOUTLINE.M_PRODUCT_ID=M_PRODUCT.M_PRODUCT_ID
		INNER JOIN C_BPARTNER ON M_INOUT.C_BPARTNER_ID = C_BPARTNER.C_BPARTNER_ID 
		LEFT JOIN C_INVOICELINE ON M_INOUTLINE.em_compra_il_id = C_INVOICELINE.C_INVOICELINE_ID
		LEFT JOIN C_INVOICE ON C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
      WHERE
	1=1
        AND M_PRODUCT.COSTTYPE='AV'
        AND M_INOUT.ISSOTRX='N'
        AND M_INOUT.PROCESSED='Y'
        AND M_INOUTLINE.MOVEMENTQTY>0
        AND M_INOUT.DOCSTATUS <> 'DR' AND M_INOUT.DOCSTATUS <> 'RE' AND M_INOUT.DOCSTATUS <> 'VO'
        AND M_INOUT.AD_CLIENT_ID = v_Client
        --AND M_PRODUCT.VALUE IN ('2587','2583')
        --AND M_INOUT.DOCUMENTNO = '10001055'
        AND NOT EXISTS
        (SELECT 1 FROM M_COSTING WHERE M_INOUTLINE_ID=M_INOUTLINE.M_INOUTLINE_ID)
      ORDER BY M_PRODUCT.M_PRODUCT_ID, M_INOUT.MOVEMENTDATE, M_INOUTLINE.MOVEMENTQTY DESC
      )
    LOOP
       -- RAISE NOTICE'%','FOFOFO2';

    --RAISE NOTICE '%', 'ResultSTR-7: ' || v_ResultStr;
    
      v_ResultStr:='new albaran:   '||Cur_InOutLine.M_INOUTLINE_ID;
      IF(Cur_InOutLine.M_PRODUCT_ID<>v_ProductOld) THEN
        v_Date:=NULL;
        v_CumQty:=0;
      ELSIF (Cur_InOutLine.MOVEMENTDATE<>v_DateOld) THEN
        v_CumQty:=0;
      END IF;
      SELECT COUNT(*)
      INTO v_Count
      FROM M_COSTING
      WHERE M_PRODUCT_ID=Cur_InOutLine.M_PRODUCT_ID
        AND AD_CLIENT_ID = v_Client;
      IF(v_Count>0) THEN
        FOR Cur_ProdCost IN
          (SELECT COST, DATETO, M_COSTING_ID
          FROM M_COSTING
          WHERE M_PRODUCT_ID=Cur_InOutLine.M_PRODUCT_ID
            AND DATEFROM <= Cur_InOutLine.MOVEMENTDATE
            AND AD_CLIENT_ID = v_Client
          ORDER BY DATETO DESC, M_COSTING_ID
          )
        LOOP
          v_Cost:=Cur_ProdCost.COST;
          v_Date:=Cur_ProdCost.DATETO;
          UPDATE M_COSTING
          SET DATETO = Cur_InOutLine.MOVEMENTDATE,
          Updated=now(),
      	  UpdatedBy=v_User
          WHERE M_COSTING_ID = Cur_ProdCost.M_COSTING_ID;
          EXIT;
        END LOOP;
        IF (v_Date IS NULL) THEN
          SELECT MIN(DATEFROM) INTO v_Date
          FROM M_COSTING
          WHERE M_PRODUCT_ID=Cur_InOutLine.M_PRODUCT_ID
            AND DATEFROM > Cur_InOutLine.MOVEMENTDATE
            AND AD_CLIENT_ID = v_Client;
        END IF;
      ELSE
        v_Cost:=NULL;
      END IF;
      
      IF(v_Cost IS NOT NULL) THEN
        SELECT COALESCE(SUM(MOVEMENTQTY), 0)
        INTO v_Qty
        FROM M_TRANSACTION
        WHERE M_PRODUCT_ID=Cur_InOutLine.M_PRODUCT_ID
          AND CREATED<Cur_InOutLine.MOVEMENTDATE
          AND AD_CLIENT_ID = v_Client;
          --AND M_INOUTLINE_ID = Cur_InoutLine.M_INOUTLINE_ID;
      ELSE
        v_Qty:=0;
      END IF;
      v_ResultStr:='invoice albaran:   '||Cur_InOutLine.M_INOUTLINE_ID;
      --RAISE NOTICE '%', 'invoice albaran:';
      SELECT CASE WHEN SUM(QTYINVOICED) <=0 THEN 0 ELSE SUM(C_INVOICELINE.QTYINVOICED*C_CURRENCY_CONVERT_PRECISION(C_INVOICELINE.PRICEACTUAL, C_INVOICE.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, Cur_InOutLine.MOVEMENTDATE)), NULL, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, 'C')) /SUM(QTYINVOICED) END,
             CASE WHEN SUM(QTYINVOICED) <=0 THEN 0 ELSE COUNT(C_INVOICELINE.C_INVOICELINE_ID) END
      INTO v_Price, v_Count
      FROM M_MATCHINV, C_INVOICELINE, C_INVOICE
      WHERE M_MATCHINV.C_INVOICELINE_ID=C_INVOICELINE.C_INVOICELINE_ID
        AND M_MATCHINV.M_INOUTLINE_ID=Cur_InOutLine.M_INOUTLINE_ID
        AND C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
        AND QTYINVOICED<>0;
        
      IF(v_Count=0) THEN
        v_ResultStr:='order albaran:   '||Cur_InOutLine.M_INOUTLINE_ID;
        SELECT CASE WHEN SUM(C_ORDERLINE.QTYORDERED) <=0 THEN 0 ELSE SUM(C_ORDERLINE.QTYORDERED*C_CURRENCY_CONVERT_PRECISION(C_ORDERLINE.PRICEACTUAL, COALESCE(C_ORDERLINE.C_CURRENCY_ID, C_ORDER.C_CURRENCY_ID), v_BaseCurrency, TO_DATE(COALESCE(C_ORDERLINE.DATEORDERED, C_ORDER.DATEORDERED, Cur_InOutLine.MOVEMENTDATE)), NULL, C_ORDERLINE.AD_CLIENT_ID, C_ORDERLINE.AD_ORG_ID, 'C')) /SUM(C_ORDERLINE.QTYORDERED) END,
               CASE WHEN SUM(C_ORDERLINE.QTYORDERED) <=0 THEN 0 ELSE COUNT(C_ORDERLINE.C_ORDERLINE_ID) END
        INTO v_Price, v_Count
        FROM M_MATCHPO, C_ORDERLINE, C_ORDER
        WHERE M_MATCHPO.C_ORDERLINE_ID=C_ORDERLINE.C_ORDERLINE_ID
          AND M_MATCHPO.C_INVOICELINE_ID IS NULL
          AND M_MATCHPO.M_INOUTLINE_ID=Cur_InOutLine.M_INOUTLINE_ID
          AND C_ORDER.C_ORDER_ID = C_ORDERLINE.C_ORDER_ID
          AND C_ORDERLINE.QTYORDERED<>0;

      END IF;
      IF(v_Count=0) THEN
        FOR Cur_PriceList IN
          (SELECT C_CURRENCY_CONVERT_PRECISION(M_PRODUCTPRICE.PRICESTD, M_PRICELIST.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(Cur_InOutLine.MOVEMENTDATE), NULL, M_PRODUCTPRICE.AD_CLIENT_ID, M_PRODUCTPRICE.AD_ORG_ID, 'C') AS PRICESTD
          FROM M_PRICELIST, M_PRICELIST_VERSION, M_PRODUCTPRICE
          WHERE M_PRICELIST_VERSION.M_PRICELIST_ID=
            (SELECT po_pricelist_id
            FROM C_BPARTNER
            WHERE c_bpartner_id=Cur_InOutLine.C_BPARTNER_ID
            )
            AND M_PRICELIST_VERSION.M_PRICELIST_VERSION_ID=M_PRODUCTPRICE.M_PRICELIST_VERSION_ID
            AND M_PRICELIST_VERSION.ISACTIVE='Y'
            AND M_PRODUCTPRICE.M_PRODUCT_ID=Cur_InOutLine.M_PRODUCT_ID
            AND M_PRICELIST.M_PRICELIST_ID = M_PRICELIST_VERSION.M_PRICELIST_ID
            AND M_PRICELIST_VERSION.VALIDFROM<Cur_InOutLine.MOVEMENTDATE
            AND M_PRICELIST.AD_CLIENT_ID = v_Client
          ORDER BY M_PRICELIST_VERSION.VALIDFROM DESC
          )
        LOOP
          v_Price:=Cur_PriceList.PRICESTD;
          
			EXIT;
        END LOOP;
      END IF;
          
      /*-------------------------------------------------------------------------------------------------------------*/
      /* Agregado por Carlos Salinas, para tomar en cuenta las facturas de indirectos asociadas a esta línea de costo*/
      /*-------------------------------------------------------------------------------------------------------------*/
      -- Calcula el total en dinero de las facturas asociadas a la remisión de esta línea.


       IF (Cur_InOutLine.PRICEACTUAL IS NOT NULL) THEN
		v_Price = C_CURRENCY_CONVERT_PRECISION(Cur_InOutLine.PRICEACTUAL, Cur_InOutLine.C_CURRENCY_ID, v_BaseCurrency, Cur_InOutLine.dateinvoiced, NULL, Cur_InOutLine.AD_CLIENT_ID, Cur_InOutLine.AD_ORG_ID, 'C');
       END IF;

	IF (v_Price IS NULL) THEN
		RAISE_APPLICATION_ERROR(-20000, 'PRECIO NULO: ' || Cur_InOutLine.DOCUMENTNO || ' -- Producto: ' || Cur_InOutLine.PRODUCT_VALUE) ;
	END IF;

      v_totalFacturas = 0;
      v_indirectosAcumulado = 0; 
      v_PrecioOriginal := COALESCE(v_Price,0);

      FOR CUR_INDIRECTOS IN
      (SELECT C_INVOICE_ID, TOTALLINES, C_CURRENCY_ID, DATEINVOICED, AD_CLIENT_ID, AD_ORG_ID
      FROM C_INVOICE
      WHERE EM_COSTEO_ESINDIRECTOS = 'Y'
      AND EM_COSTEO_M_INOUT_ID = 
	(SELECT M_INOUT_ID FROM M_INOUTLINE WHERE M_INOUTLINE_ID = Cur_InOutLine.M_INOUTLINE_ID)
      AND DOCSTATUS = 'CO')
      LOOP
	v_totalFacturas := v_totalFacturas + C_CURRENCY_CONVERT_PRECISION(CUR_INDIRECTOS.TOTALLINES, CUR_INDIRECTOS.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(COALESCE(CUR_INDIRECTOS.DATEINVOICED, now())), NULL, CUR_INDIRECTOS.AD_CLIENT_ID, CUR_INDIRECTOS.AD_ORG_ID, 'C');
	--INSERT INTO ZTEGIK_TEST (ZTEGIK_TEST_ID, CREATEDBY, UPDATEDBY, NUMERO)
	--VALUES ('Acabo de entrar','100','100', v_totalFacturas);
      END LOOP;

      v_totalFacturas := COALESCE(v_totalFacturas,0);

      -- Calcula la cantidad de piezas en esa remisión.
      	      SELECT COALESCE(SUM(MOVEMENTQTY),1)
	      INTO v_cantidadpiezas
	      FROM M_INOUTLINE
	      WHERE M_INOUT_ID = (SELECT M_INOUT_ID FROM M_INOUTLINE WHERE M_INOUTLINE_ID = Cur_InOutLine.M_INOUTLINE_ID);
      



      --RAISE NOTICE '%', '1';
      SELECT 
      C_CURRENCY_CONVERT_PRECISION(SUM(TOTALLINES), C_INVOICE.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, Cur_InOutLine.MOVEMENTDATE)), NULL, C_INVOICE.AD_CLIENT_ID, C_INVOICE.AD_ORG_ID, 'C'),
      SUM(TOTALLINES) AS sinTC
      --COALESCE(SUM(TOTALLINES),0)
      INTO v_dineroFactura, v_dineroFacturaSTC
      FROM C_INVOICE
      WHERE C_INVOICE_ID IN 
      (
	      SELECT C_INVOICE.C_INVOICE_ID
	      FROM M_MATCHINV, C_INVOICELINE, C_INVOICE
	      WHERE M_MATCHINV.C_INVOICELINE_ID=C_INVOICELINE.C_INVOICELINE_ID
		AND M_MATCHINV.M_INOUTLINE_ID=Cur_InOutLine.M_INOUTLINE_ID
		AND C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
		AND QTYINVOICED<>0
		
      )
      GROUP BY C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, C_INVOICE.AD_CLIENT_ID, C_INVOICE.AD_ORG_ID
      ;

 --RAISE NOTICE '%', '2';

       SELECT 
       --COALESCE(SUM(LINENETAMT),0)
       C_CURRENCY_CONVERT_PRECISION(SUM(LINENETAMT), C_INVOICE.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, Cur_InOutLine.MOVEMENTDATE)), NULL, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, 'C')
       INTO v_totalLinea
       FROM C_INVOICELINE
       INNER JOIN C_INVOICE ON C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
       WHERE C_INVOICELINE_ID IN
       (
	      SELECT C_INVOICELINE.C_INVOICELINE_ID
	      FROM M_MATCHINV, C_INVOICELINE, C_INVOICE
	      WHERE M_MATCHINV.C_INVOICELINE_ID=C_INVOICELINE.C_INVOICELINE_ID
		AND M_MATCHINV.M_INOUTLINE_ID=Cur_InOutLine.M_INOUTLINE_ID
		AND C_INVOICE.C_INVOICE_ID = C_INVOICELINE.C_INVOICE_ID
		AND QTYINVOICED<>0
       )
       GROUP BY C_INVOICE.C_CURRENCY_ID, C_INVOICE.DATEINVOICED, C_INVOICE.AD_CLIENT_ID, C_INVOICE.AD_ORG_ID, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID
       ;
      
      IF(COALESCE(v_dineroFactura,0)=0) THEN
        v_ResultStr:='order albaran:   '||Cur_InOutLine.M_INOUTLINE_ID;

         --RAISE NOTICE '%', '3';
	SELECT 
	--COALESCE(SUM(TOTALLINES),0)
	C_CURRENCY_CONVERT_PRECISION(SUM(TOTALLINES), C_ORDER.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(COALESCE(C_ORDER.DATEORDERED, Cur_InOutLine.MOVEMENTDATE)), NULL, C_ORDER.AD_CLIENT_ID, C_ORDER.AD_ORG_ID, 'C')
	INTO v_dineroFactura
	FROM C_ORDER
	WHERE C_ORDER_ID IN
	(
		SELECT C_ORDER.C_ORDER_ID
		FROM M_MATCHPO, C_ORDERLINE, C_ORDER
		WHERE M_MATCHPO.C_ORDERLINE_ID=C_ORDERLINE.C_ORDERLINE_ID
		  AND M_MATCHPO.C_INVOICELINE_ID IS NULL
		  AND M_MATCHPO.M_INOUTLINE_ID=Cur_InOutLine.M_INOUTLINE_ID
		  AND C_ORDER.C_ORDER_ID = C_ORDERLINE.C_ORDER_ID
		  AND C_ORDERLINE.QTYORDERED<>0
        )
       GROUP BY C_ORDER.C_CURRENCY_ID, C_ORDER.DATEORDERED, C_ORDER.AD_CLIENT_ID, C_ORDER.AD_ORG_ID
        ;

 --RAISE NOTICE '%', '4';

        SELECT 
        --COALESCE(SUM(LINENETAMT),0)
        C_CURRENCY_CONVERT_PRECISION(SUM(LINENETAMT), C_ORDER.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(COALESCE(C_ORDER.DATEORDERED, Cur_InOutLine.MOVEMENTDATE)), NULL, C_ORDER.AD_CLIENT_ID, C_ORDER.AD_ORG_ID, 'C')
        INTO v_totalLinea
	FROM C_ORDERLINE
	INNER JOIN C_ORDER ON C_ORDER.C_ORDER_ID = C_ORDERLINE.C_ORDER_ID
	WHERE C_ORDERLINE_ID IN
	(
		SELECT C_ORDERLINE.C_ORDERLINE_ID
		FROM M_MATCHPO, C_ORDERLINE, C_ORDER
		WHERE M_MATCHPO.C_ORDERLINE_ID=C_ORDERLINE.C_ORDERLINE_ID
		  AND M_MATCHPO.C_INVOICELINE_ID IS NULL
		  AND M_MATCHPO.M_INOUTLINE_ID=Cur_InOutLine.M_INOUTLINE_ID
		  AND C_ORDER.C_ORDER_ID = C_ORDERLINE.C_ORDER_ID
		  AND C_ORDERLINE.QTYORDERED<>0
        )
        GROUP BY C_ORDER.C_CURRENCY_ID, C_ORDER.DATEORDERED, C_ORDER.AD_CLIENT_ID, C_ORDER.AD_ORG_ID
        ;
       END IF; 


       --RAISE NOTICE '%', 'M_INOUTLINE_ID: ' || COALESCE(Cur_InOutLine.M_INOUTLINE_ID,'no hay');
       --RAISE NOTICE '%', 'PRODUCT_VALUE: ' || COALESCE(Cur_InOutLine.PRODUCT_VALUE,'no hay');
       --RAISE NOTICE '%', 'v_totalLinea: ' || COALESCE(v_totalLinea,0);
       --RAISE NOTICE '%', 'v_price: ' || COALESCE(v_Price,0);
       --RAISE NOTICE '%', 'v_dineroFacturaSTC: ' || COALESCE(v_dineroFacturaSTC,0);
       --RAISE NOTICE '%', 'v_dineroFactura: ' || COALESCE(v_dineroFactura,0);
       --RAISE NOTICE '%', 'v_cantidadPiezas: ' || COALESCE(v_cantidadPiezas,0);

       IF (COALESCE(v_dineroFactura,0) = 0) THEN
		v_Porcentaje = 0;
		v_FactorIndirectos = 0;
       ELSE

	v_Porcentaje = COALESCE(v_totalLinea,0) / COALESCE(v_dineroFactura,1) ;
	
	v_FactorIndirectos = (COALESCE(v_dineroFactura,0) + COALESCE(v_totalFacturas,0)) / COALESCE(v_dineroFactura,1);
	
	IF (COALESCE(v_FactorIndirectos,0) = 0) THEN
			v_FactorIndirectos = 1;
	END IF;
       END IF;
       

       --RAISE NOTICE '%', 'v_Porcentaje: ' || COALESCE(v_Porcentaje,0);
       --RAISE NOTICE '%', 'v_FactorIndirectos: ' || COALESCE(v_FactorIndirectos,0);

      -- Calcula el costo indirecto a aplicar a cada una de las piezas
      v_costosIndirectos = COALESCE(v_Price,0) * COALESCE(v_FactorIndirectos,1) - COALESCE(v_Price,0);

      --C_CURRENCY_CONVERT_PRECISION(C_INVOICELINE.PRICEACTUAL, C_INVOICE.C_CURRENCY_ID, v_BaseCurrency, TO_DATE(COALESCE(C_INVOICE.DATEINVOICED, Cur_InOutLine.MOVEMENTDATE)), NULL, C_INVOICELINE.AD_CLIENT_ID, C_INVOICELINE.AD_ORG_ID, 'C'))

       --RAISE NOTICE '%', '---------------------------------------------------------------------------------------------------------------------------------------------------';
       --RAISE NOTICE '%', 'v_totalFacturas: ' || COALESCE(v_totalFacturas,0);
       --RAISE NOTICE '%', 'v_Porcentaje	: ' || COALESCE(v_Porcentaje,0);
       --RAISE NOTICE '%', 'v_costosIndirectos: ' || COALESCE(v_costosIndirectos,0);
       --RAISE NOTICE '%', '---------------------------------------------------------------------------------------------------------------------------------------------------';

      -- Suma el costo indirecto a el costo obtenido anteriormente.
      v_Price := COALESCE(v_Price,0) + COALESCE(v_costosIndirectos,0);
      v_indirectosAcumulado := COALESCE(v_indirectosAcumulado,0) + COALESCE(v_costosIndirectos,0);
      v_PrecioOriginal := COALESCE(v_Price,0) - COALESCE(v_indirectosAcumulado,0);




      /*-------------------------------------------------------------------------------------------------------------*/
      /* Agregado por Carlos Salinas, para tomar en cuenta las facturas de indirectos asociadas a esta línea de costo*/
      /*-------------------------------------------------------------------------------------------------------------*/


      v_CostNew := ROUND((CASE
            WHEN v_Qty+v_CumQty<0 THEN v_Price
            WHEN (v_Qty+Cur_InOutLine.MOVEMENTQTY+v_CumQty) = 0 THEN 0
            ELSE (((v_Qty+v_CumQty)*COALESCE(v_Cost, v_Price)) +(Cur_InOutLine.MOVEMENTQTY *v_Price)) /(v_Qty+Cur_InOutLine.MOVEMENTQTY+v_CumQty) END), c_get_currency_precision(v_basecurrency, 'C'));
      v_PriceNew := v_Price;

      --RAISE NOTICE '%', 'CSM --  v_Qty: ' || v_Qty;
      --RAISE NOTICE '%', 'CSM --  v_CumQty: ' || v_CumQty;
      --RAISE NOTICE '%', 'CSM --  v_Cost: ' || v_Cost;
      --RAISE NOTICE '%', 'CSM --  v_Price: ' || v_Price;
      --RAISE NOTICE '%', 'CSM --  Costo: ' || v_CostNew;
      --RAISE NOTICE '%', 'CSM --  PrecioNew: ' || v_PriceNew;

      IF (v_PriceNew IS NULL) THEN
        v_Result := 2;
        v_MessageCount := v_MessageCount + 1;
        IF (v_MessageCount < 3) THEN	    
	    v_Message := v_Message || '<br><br>@CannotCalcCosts@:  ''' || Cur_InOutLine.BPARTNER_NAME || ''', ''' || Cur_InOutLine.PRODUCT_VALUE || '''';
	ELSE 
	    IF (v_MessageCount = 3) THEN
	        v_Message := v_Message || '<br><br>@NoMoreMessages@';
	    END IF;
	END IF;

	      FOR Cur_OldCost IN
		(SELECT PRICE, COST
		FROM M_COSTING
		WHERE DATETO <= Cur_InOutLine.MOVEMENTDATE
		  AND M_PRODUCT_ID = Cur_InOutLine.M_PRODUCT_ID
		  AND COSTTYPE = 'AV'
		ORDER BY DATETO DESC
		)
	      LOOP
		v_CostNew := COALESCE(v_CostNew, Cur_OldCost.COST);
		v_PriceNew := COALESCE(v_PriceNew, Cur_OldCost.PRICE);
		EXIT;
	      END LOOP;
      END IF;

      IF (v_PriceNew IS NULL) THEN   
	IF (v_MessageCount < 3) THEN	 
	      v_Message := v_Message || '. @CannotCalcPrevCost@';
	END IF;
      ELSE     
              --RAISE NOTICE '%', 'Insertando Costo';
              --RAISE NOTICE '%', 'v_Message';
	      --v_Re-sultStr:='insert costing:   '||Cur_InOutLine.M_INOUTLINE_ID;


	      /*-------------------------------------------------------------------------------------------------------------*/
	      /* Insert cambiado por Carlos Salinas, para meter en la tabla un desglose del costo del producto --------------*/
	      /*-------------------------------------------------------------------------------------------------------------*/

	      INSERT
	      INTO M_COSTING
		(
		  M_COSTING_ID, CREATED, CREATEDBY, UPDATED,
		  UPDATEDBY, AD_CLIENT_ID, AD_ORG_ID, M_PRODUCT_ID,
		  DATETO, DATEFROM, ISMANUAL, M_INOUTLINE_ID,
		  C_INVOICELINE_ID, QTY, PRICE, CUMQTY,
		  COST, COSTTYPE, ISPERMANENT, EM_COSTEO_PRECIOORIGINAL, EM_COSTEO_INDIRECTOS
		)
		VALUES
		(
		  Ad_Sequence_Nextno('M_Costing'), now(), v_User, now(),
		  v_User, Cur_InOutLine.AD_CLIENT_ID, Cur_InOutLine.AD_ORG_ID, Cur_InOutLine.M_PRODUCT_ID,
		  COALESCE(v_Date, TO_DATE('31-12-9999', 'DD-MM-YYYY')), Cur_InOutLine.MOVEMENTDATE, 'N', Cur_InOutLine.M_INOUTLINE_ID,
		  NULL, Cur_InOutLine.MOVEMENTQTY, v_PriceNew, COALESCE(v_Qty, 0) + Cur_InOutLine.MOVEMENTQTY + v_CumQty, v_CostNew,
		  'AV', 'N', v_PrecioOriginal, v_indirectosAcumulado
		);

	      /*-------------------------------------------------------------------------------------------------------------*/
	      /* Insert cambiado por Carlos Salinas, para meter en la tabla un desglose del costo del producto --------------*/
	      /*-------------------------------------------------------------------------------------------------------------*/
      END IF; 

      v_CumQty:=v_CumQty + Cur_InOutLine.MOVEMENTQTY;
      v_DateOld:=Cur_InOutLine.MOVEMENTDATE;
      v_ProductOld:=Cur_InOutLine.M_PRODUCT_ID;

      v_maxDateTo = now();

      SELECT MAX(DATETO) INTO v_maxDateTo FROM M_COSTING WHERE M_PRODUCT_ID = Cur_InOutLine.M_PRODUCT_ID;
      --RAISE NOTICE '%', 'v_maxDateTo: ' || v_maxDateTo;
	
      IF (TO_DATE('31-12-9999', 'DD-MM-YYYY') <> TO_DATE(v_maxDateTo)) THEN
	--RAISE NOTICE '%', 'Entre';
	UPDATE M_COSTING SET DATETO = TO_DATE('31-12-9999', 'DD-MM-YYYY') WHERE M_PRODUCT_ID = Cur_InOutLine.M_PRODUCT_ID AND TO_DATE(DATETO) = TO_DATE(v_maxDateTo);
      END IF;

     -- RAISE NOTICE '%', 'ResultSTR-10: ' || v_ResultStr;
    END LOOP;
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message);
    AD_UPDATE_PINSTANCE(p_PInstance_ID, v_User, 'N', v_Result, v_Message);
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr);
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr);
  RETURN;
END COSTEO_CALCULAR
]]></body>
    </function>
  </database>
