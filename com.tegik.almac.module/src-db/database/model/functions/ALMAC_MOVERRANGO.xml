<?xml version="1.0"?>
  <database name="FUNCTION ALMAC_MOVERRANGO">
    <function name="ALMAC_MOVERRANGO" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
  v_ResultStr VARCHAR2(52000):='';
  v_Message VARCHAR2(52000):='';
  v_Record_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
  v_inicial NUMBER;
  v_final NUMBER;
  v_numero NUMBER;
  v_cantidad NUMBER;
  v_prefijo VARCHAR(10);
  v_atributo VARCHAR(255);
  cur_movement RECORD;
  v_mensaje VARCHAR(50000):='';
  array_len NUMBER;
  v_lista VARCHAR(50000);
  lista_valores VARCHAR(255)[];
  v_product_id VARCHAR (32);
  v_tileoslab VARCHAR(22);
  v_locator_id VARCHAR (32);
  v_locatorto_id VARCHAR (32);
  v_line NUMBER;  
  v_asi_id VARCHAR (32);
  v_uom_id VARCHAR (32);
  BEGIN


--  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      IF (Cur_Parameter.parametername LIKE 'inicial') THEN
		v_inicial := Cur_Parameter.p_number;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'final') THEN
		v_final := Cur_Parameter.p_number;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'lista') THEN
		v_lista := Cur_Parameter.p_string;
      END IF;
	IF (Cur_Parameter.parametername LIKE 'product') THEN
		v_product_id := Cur_Parameter.p_string;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'hueco') THEN
		v_locator_id := Cur_Parameter.p_string;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'huecoto') THEN
		v_locatorto_id := Cur_Parameter.p_string;
      END IF;
    END LOOP; -- Get Parameter
    -- Read Information from Record
    


	SELECT * INTO cur_movement FROM m_movement WHERE m_movement_id = v_Record_ID;
   
	IF (v_inicial > v_final) THEN
		RAISE_APPLICATION_ERROR(-20000, 'El número inicial no debe ser mayor que el final');
	END IF;

	v_numero = v_inicial;
	
	SELECT PREFIX INTO v_prefijo 
		FROM M_LOTCTL WHERE M_LOTCTL_ID IN 
			(SELECT M_LOTCTL_ID FROM M_ATTRIBUTESET WHERE M_ATTRIBUTESET_ID IN 
				(SELECT M_ATTRIBUTESET_ID FROM M_PRODUCT WHERE M_PRODUCT_ID IN
					(v_product_id)
				)
			);

	IF (v_prefijo IS NULL) THEN
		RAISE_APPLICATION_ERROR(-20000, 'El producto no tiene un set de atributos definido');
	END IF;

	SELECT em_dmprod_tileoslab, c_uom_id INTO v_tileoslab, v_uom_id FROM m_product WHERE m_product_id=v_product_id;
	IF v_tileoslab <> 'Slab' THEN
		RAISE_APPLICATION_ERROR(-20000, 'Solo pueden asignarse slabs por rango.') ;
	END IF;

IF (v_final IS NOT NULL AND v_inicial IS NOT NULL) THEN

	WHILE v_numero <= v_final LOOP
		v_atributo = v_numero;
		SELECT M_ATTRIBUTESETINSTANCE_ID INTO v_asi_id FROM M_ATTRIBUTESETINSTANCE WHERE DESCRIPTION = v_prefijo || v_atributo;
		SELECT SUM(QTYONHAND) INTO v_cantidad
			FROM M_STORAGE_DETAIL 
			WHERE M_PRODUCT_ID = v_product_id
			AND M_LOCATOR_ID IN 
			(v_locator_id)
			AND M_ATTRIBUTESETINSTANCE_ID IN (v_asi_id);

		IF (COALESCE(v_cantidad,0) <= 0) THEN
		--v_mensaje = COALESCE(v_mensaje, '') || ' // ' ||v_product_id ||' ' || v_locator_id||''||v_asi_id;
		v_mensaje = COALESCE(v_mensaje, '') || ' // ' || v_prefijo || v_atributo;
		ELSE
			SELECT COALESCE(line,0) into v_line FROM m_movementline 
			WHERE m_movement_id=v_Record_ID 
			ORDER BY line  DESC LIMIT 1;

			v_line:=COALESCE(v_line,0)+10;
		INSERT INTO m_movementline(
					m_movementline_id, 
					ad_client_id, 
					ad_org_id, 
					isactive, 
					created,
					createdby, 
					updated, 
					updatedby, 
					m_movement_id, 
					m_locator_id, 
					m_locatorto_id, 
					m_product_id, 
					line, 
					movementqty, 
					description, 
					m_attributesetinstance_id, 
					m_product_uom_id, 
					quantityorder, 
					c_uom_id
					)
			    VALUES (	GET_UUID(),--m_movementline_id, 
					cur_movement.ad_client_id, 
					cur_movement.ad_org_id, 
					cur_movement.isactive, 
					now(),
					cur_movement.createdby, 
					now(),--updated, 
					cur_movement.updatedby, 
					cur_movement.m_movement_id, 
					v_locator_id,--m_locator_id, 
					v_locatorto_id,--m_locatorto_id, 
					v_product_id,--m_product_id, 
					v_line,--line, 
					v_cantidad,--movementqty, 
					'',--description, 
					v_asi_id,--m_attributesetinstance_id, 
					NULL,--m_product_uom_id, 
					NULL,--quantityorder, 
					v_uom_id--c_uom_id
					);

		END IF;
		v_numero = v_numero + 1;
	END LOOP;
	END IF;
	IF (COALESCE(v_lista, '') <> '') THEN
		lista_valores = string_to_array(v_lista, ',');
		array_len := array_upper(lista_valores, 1);
		FOR i IN 1 .. array_len
		LOOP
			v_atributo = trim(lista_valores[i]);

			SELECT M_ATTRIBUTESETINSTANCE_ID INTO v_asi_id FROM M_ATTRIBUTESETINSTANCE WHERE DESCRIPTION = v_prefijo || v_atributo;

			SELECT SUM(QTYONHAND) INTO v_cantidad
			FROM M_STORAGE_DETAIL 
			WHERE M_PRODUCT_ID = v_product_id
			AND M_LOCATOR_ID IN 
			(v_locator_id)
			AND M_ATTRIBUTESETINSTANCE_ID IN (v_asi_id);

			
			IF (COALESCE(v_cantidad,0) <= 0) THEN
				v_mensaje = COALESCE(v_mensaje, '') || ' // ' || v_prefijo || v_atributo;
			ELSE
				SELECT COALESCE(line,0) into v_line FROM m_movementline WHERE m_movement=v_Record_ID ORDER BY line DESC LIMIT 1;
				v_line:=v_line+10;
			INSERT INTO m_movementline(
					m_movementline_id, 
					ad_client_id, 
					ad_org_id, 
					isactive, 
					created,
					createdby, 
					updated, 
					updatedby, 
					m_movement_id, 
					m_locator_id, 
					m_locatorto_id, 
					m_product_id, 
					line, 
					movementqty, 
					description, 
					m_attributesetinstance_id, 
					m_product_uom_id, 
					quantityorder, 
					c_uom_id
					)
			    VALUES (	GET_UUID(),--m_movementline_id, 
					cur_movement.ad_client_id, 
					cur_movement.ad_org_id, 
					cur_movement.isactive, 
					now(),
					cur_movement.createdby, 
					now(),--updated, 
					updatedby, 
					cur_movement.m_movement_id, 
					v_locator_id,--m_locator_id, 
					v_locatorto_id,--m_locatorto_id, 
					v_product_id,--m_product_id, 
					v_line,--line, 
					v_cantidad,--movementqty, 
					'',--description, 
					v_asi_id,--m_attributesetinstance_id, 
					NULL,--m_product_uom_id, 
					NULL,--quantityorder, 
					v_uom_id--c_uom_id
					);
			END IF;
		END LOOP;
	END IF;
	

   
     --FINISH_PROCESS
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, 'Se asignó la mercancía, no se pudieron asignar los siguientes números:' || '<br>' || v_mensaje);
  
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr ) ;
  RETURN;
END ALMAC_MOVERRANGO
]]></body>
    </function>
  </database>
