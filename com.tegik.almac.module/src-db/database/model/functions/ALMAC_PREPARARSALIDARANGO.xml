<?xml version="1.0"?>
  <database name="FUNCTION ALMAC_PREPARARSALIDARANGO">
    <function name="ALMAC_PREPARARSALIDARANGO" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_Invoice_CreateReceipt.sql,v 1.2 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: Create Receipt (Shipment) From Invoice
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(52000):='';
  v_Message VARCHAR2(52000):='';
  v_Record_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
  v_inicial NUMBER;
  v_final NUMBER;
  v_numero NUMBER;
  v_cantidad NUMBER;
  v_prefijo VARCHAR(10);
  v_atributo VARCHAR(255);
  CUR_ORDERLINE RECORD;
  v_mensaje VARCHAR(50000):='';
  array_len NUMBER;
  v_lista VARCHAR(50000);
  lista_valores VARCHAR(255)[];
  p_asignar VARCHAR(1);
  p_liberar VARCHAR(1);
  p_act_validar VARCHAR(1);
  p_act_enviar VARCHAR(1);
  p_des_validar VARCHAR(1);
  p_des_enviar VARCHAR(1);
  v_enviar VARCHAR(1);
  p_numero_checks NUMBER:=0;
  v_mensajeregreso VARCHAR (255):='';
  CUR_PREFIJO RECORD;
  BEGIN

    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
  
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_mensajeregreso:=v_mensajeregreso||' '||Cur_Parameter.parametername ;
      IF (Cur_Parameter.parametername LIKE 'inicial') THEN
		v_inicial := Cur_Parameter.p_number;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'final') THEN
		v_final := Cur_Parameter.p_number;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'lista') THEN
		v_lista := Cur_Parameter.p_string;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'p_act_enviar') THEN
		p_act_enviar := Cur_Parameter.P_String;
		IF Cur_Parameter.P_String='Y' THEN
			v_enviar = 'Y';
			p_numero_checks:=p_numero_checks+1;

		END IF;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'p_des_enviar') THEN
		p_des_enviar := Cur_Parameter.P_String;
		IF Cur_Parameter.P_String='Y' THEN
			v_enviar = 'N';
			p_numero_checks:=p_numero_checks+1;
		END IF;
      END IF;


    END LOOP; -- Get Parameter
    -- Read Information from Record


	IF p_numero_checks = 0 THEN
		RAISE_APPLICATION_ERROR(-20000, 'Debe seleccionar una acción a realizar.');
	END IF;
	IF p_numero_checks >1 THEN
		RAISE_APPLICATION_ERROR(-20000, 'Solo debe seleccionar una acción a realizar.');
	END IF;

	--SELECT * INTO CUR_ORDERLINE FROM C_ORDERLINE WHERE C_ORDERLINE_ID = v_Record_ID;
   
	IF (v_inicial > v_final) THEN
		RAISE_APPLICATION_ERROR(-20000, 'El número inicial no debe ser mayor que el final');
	END IF;

	v_numero = v_inicial;

	/*SELECT PREFIX INTO v_prefijo 
		FROM M_LOTCTL WHERE M_LOTCTL_ID IN 
			(SELECT M_LOTCTL_ID FROM M_ATTRIBUTESET WHERE M_ATTRIBUTESET_ID IN 
				(SELECT M_ATTRIBUTESET_ID FROM M_PRODUCT WHERE M_PRODUCT_ID IN
					(SELECT M_PRODUCT_ID FROM C_ORDERLINE WHERE C_ORDERLINE_ID = v_Record_ID)));

	IF (v_prefijo IS NULL) THEN
		RAISE_APPLICATION_ERROR(-20000, 'El producto no tiene un set de atributos definido');
	END IF;
	*/
    
	WHILE v_numero <= v_final LOOP
		v_atributo = v_numero;
		FOR CUR_PREFIJO IN (SELECT PREFIX FROM M_LOTCTL WHERE AD_CLIENT_ID = (SELECT AD_CLIENT_ID FROM C_INVOICE WHERE C_INVOICE_ID = v_Record_ID))
		LOOP
			UPDATE VENTAS_HISTORIAL_DESGLOCE SET ENVIAR = COALESCE(v_enviar , 'N')
				WHERE C_INVOICE_ID = v_Record_ID 
				AND M_INOUTLINE_ID IS NULL 
				AND M_ATTRIBUTESETINSTANCE_ID IN 
					(SELECT M_ATTRIBUTESETINSTANCE_ID 
					FROM M_ATTRIBUTESETINSTANCE 
					WHERE DESCRIPTION = CUR_PREFIJO.PREFIX||v_atributo 
					AND AD_CLIENT_ID IN 
						(SELECT AD_CLIENT_ID 
						FROM C_INVOICE 
						WHERE C_INVOICE_ID = v_Record_ID));
		END LOOP;
		v_numero = v_numero + 1;
	END LOOP;

	IF (COALESCE(v_lista, '') <> '') THEN
		lista_valores = string_to_array(v_lista, ',');
		array_len := array_upper(lista_valores, 1);
		FOR i IN 1 .. array_len
		LOOP
			FOR CUR_PREFIJO IN (SELECT PREFIX FROM M_LOTCTL WHERE AD_CLIENT_ID = (SELECT AD_CLIENT_ID FROM C_INVOICE WHERE C_INVOICE_ID = v_Record_ID))
			LOOP
				v_atributo = trim(lista_valores[i]);
				UPDATE VENTAS_HISTORIAL_DESGLOCE SET ENVIAR = v_enviar 
					WHERE C_INVOICE_ID = v_Record_ID 
					AND M_INOUTLINE_ID IS NULL 
					AND M_ATTRIBUTESETINSTANCE_ID IN 
						(SELECT M_ATTRIBUTESETINSTANCE_ID 
						FROM M_ATTRIBUTESETINSTANCE 
						WHERE DESCRIPTION = CUR_PREFIJO.PREFIX||v_atributo 
						AND AD_CLIENT_ID IN 
							(SELECT AD_CLIENT_ID 
							FROM C_INVOICE 
							WHERE C_INVOICE_ID = v_Record_ID));
				v_numero = v_numero + 1;
			END LOOP;
		END LOOP;
	END IF;
	
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, 'Se asignó la mercancía con los siguientes errores:' || '<br>' || v_mensaje);
  
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ALMAC_PREPARARSALIDARANGO
]]></body>
    </function>
  </database>
