<?xml version="1.0"?>
  <database name="FUNCTION ALMAC_ASIGNAHUECOS">
    <function name="ALMAC_ASIGNAHUECOS" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_Invoice_CreateReceipt.sql,v 1.2 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: Create Receipt (Shipment) From Invoice
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(52000):='';
  v_Message VARCHAR2(52000):='';
  v_Record_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
  v_inicial NUMBER;
  v_final NUMBER;
  v_numero NUMBER;
  v_cantidad NUMBER;
  v_hueco VARCHAR2(32);
  v_prefijo VARCHAR2(10);
  v_atributo VARCHAR2(255);
  CUR_DISTRIB RECORD;
  v_mensaje VARCHAR2(50000):='';
  array_len NUMBER;
  v_lista VARCHAR2(50000);
  lista_valores VARCHAR(255)[];
  p_asignar_todos VARCHAR2(1);
  v_mensajeregreso VARCHAR2 (255):='';
  BEGIN

    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
  
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_mensajeregreso:=v_mensajeregreso||' '||Cur_Parameter.parametername ;
      IF (Cur_Parameter.parametername LIKE 'inicial') THEN
		v_inicial := Cur_Parameter.p_number;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'final') THEN
		v_final := Cur_Parameter.p_number;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'lista') THEN
		v_lista := Cur_Parameter.p_string;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'asignAll') THEN
		p_asignar_todos := Cur_Parameter.P_String;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'hueco') THEN
		v_hueco := Cur_Parameter.P_String;
      END IF;

    END LOOP; -- Get Parameter
    -- Read Information from Record
	IF COALESCE((SELECT DOCSTATUS FROM M_INOUT WHERE M_INOUT_ID IN (SELECT M_INOUT_ID FROM M_INOUTLINE WHERE M_INOUTLINE_ID = v_Record_ID)),'DR') <> 'DR' THEN
		RAISE_APPLICATION_ERROR(-20000, 'No se pueden asignar Huecos el documento ya ha sido procesado.');
	END IF;
	
	UPDATE ALMAC_DISTRIB SET M_LOCATOR_ID = v_hueco WHERE M_INOUTLINE_ID = v_Record_ID;
	--Asignacion a Todos
	IF UPPER(TRIM(p_asignar_todos)) = 'Y' THEN
		UPDATE ALMAC_DISTRIB SET M_LOCATOR_ID = v_hueco WHERE M_INOUTLINE_ID = v_Record_ID;
	--Asignacion a Rango de Numeros
	ELSIF v_inicial IS NOT NULL AND v_final IS NOT NULL THEN
		--Verificacion de los Numeros
		IF (v_inicial > v_final) THEN
			RAISE_APPLICATION_ERROR(-20000, 'El número inicial no debe ser mayor que el final ( Inicial:'||v_inicial||', Final: '||v_final||').');
		END IF;
		--Actualizacion por rango
		UPDATE ALMAC_DISTRIB SET m_locator_id = v_hueco WHERE M_ATTRIBUTESETINSTANCE_ID IN
			(SELECT M_ATTRIBUTESETINSTANCE_ID FROM M_ATTRIBUTESETINSTANCE
			WHERE M_ATTRIBUTESETINSTANCE_ID IN (SELECT M_ATTRIBUTESETINSTANCE_ID FROM ALMAC_DISTRIB WHERE M_INOUTLINE_ID = v_record_id)
			AND   EM_ALMAC_NUMERO BETWEEN v_inicial
			AND   v_final);
	--Asignacion a ciertos numeros		
	ELSIF v_lista IS NOT NULL AND TRIM(COALESCE(v_lista,'')) <> '' THEN
		lista_valores = string_to_array(v_lista, ',');
		array_len := array_upper(lista_valores, 1);
		FOR i IN 1 .. array_len
		LOOP
			v_atributo = TRIM(lista_valores[i]);
			IF(v_atributo <> '') THEN
				UPDATE ALMAC_DISTRIB SET m_locator_id = v_hueco WHERE M_ATTRIBUTESETINSTANCE_ID IN
				(SELECT M_ATTRIBUTESETINSTANCE_ID FROM M_ATTRIBUTESETINSTANCE
				WHERE M_ATTRIBUTESETINSTANCE_ID IN (SELECT M_ATTRIBUTESETINSTANCE_ID FROM ALMAC_DISTRIB WHERE M_INOUTLINE_ID = v_record_id)
				AND   EM_ALMAC_NUMERO = v_atributo);
			END IF;
		END LOOP;
	ELSE
		RAISE_APPLICATION_ERROR(-20000, 'No se envió ningún parametro.');
	END IF;
   
     --FINISH_PROCESS
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, 'Se asignaron los huecos correctamente.');
  
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END ALMAC_ASIGNAHUECOS
]]></body>
    </function>
  </database>
