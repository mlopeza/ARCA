<?xml version="1.0"?>
  <database name="FUNCTION COMPRA_INVOICE_CREATE">
    <function name="COMPRA_INVOICE_CREATE" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_invoice_id" type="VARCHAR" mode="out">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
 
  *************************************************************************
  * $Id: compra_invoice_create.sql,v 1.12 2011/10/26 06:49:27 mhaslam TEGIK $
  ***
  * Title: Create Invoice de compra para arca
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_User VARCHAR2(32);
  v_line numeric=0;
  Cur_Parameter RECORD;
   v_Result NUMBER:=1; -- Success
    -- Order Lines not invoiced   Invoice Rule: Immediate
    
v_embarque_id VARCHAR(32); 
v_order_id VARCHAR(32); 
cur_contenedor  RECORD;
cur_desgcont  RECORD;
v_embarque VARCHAR (255);

    
   BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PINSTANCE i
        LEFT JOIN AD_PINSTANCE_PARA p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_User:=Cur_Parameter.AD_User_ID;
      END LOOP; -- Get Parameter
    ELSE
      v_Record_ID:=p_Order_ID;
      SELECT CREATEDBY INTO v_User  FROM C_ORDER  WHERE C_ORDER_ID=p_Order_ID;
    END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
  BEGIN --BODY

    DELETE FROM c_invoiceline WHERE c_invoice_id=v_Record_ID;

    SELECT e.compra_embarque_id,e.name, COALESCE(i.em_compra_order_id, '0')
    INTO v_embarque_id, v_embarque, v_order_id
    FROM c_invoice i
    INNER JOIN compra_embarque e ON i.em_compra_embarque_id=e.compra_embarque_id
    WHERE i.c_invoice_id=v_Record_ID;

DBMS_OUTPUT.PUT_LINE( 'INICIO');

FOR cur_contenedor IN 
(SELECT * FROM compra_contenedor 
WHERE compra_embarque_id=v_embarque_id)
            LOOP
		DBMS_OUTPUT.PUT_LINE( 'CONTENEDOR' || COALESCE(cur_contenedor.documentno, 'NADANADA') || ' -- ' || COALESCE(cur_contenedor.compra_contenedor_id, 'NADANADA'));
	FOR cur_desgcont IN 
	(SELECT dc.*,  ol.m_product_id,ol.pricelist,ol.priceactual,ol.pricelimit, 
	ol.c_uom_id, ol.c_tax_id,ol.m_product_uom_id,ol.pricestd,
	ol.m_attributesetinstance_id, ol.taxbaseamt, o.c_order_id
	 FROM compra_desgcont dc
	INNER JOIN c_orderline ol ON dc.c_orderline_id=ol.c_orderline_id
	INNER JOIN c_order o ON o.c_order_id=ol.c_order_id 
	WHERE compra_contenedor_id=cur_contenedor.compra_contenedor_id AND o.docstatus='CO'
	--and ol.c_orderline_id not in (select il.c_orderline_id from c_invoiceline il where c_invoice_id in (select c_invoice_id from c_invoice where docstatus IN ('CO') and issotrx = 'N') and il.c_orderline_id is not null)
	)
            LOOP
		DBMS_OUTPUT.PUT_LINE( 'PRODUCTO' || COALESCE(cur_desgcont.m_product_id, 'NADANADA'));
		IF (v_order_id = cur_desgcont.c_order_id OR v_order_id = '0') THEN
			v_line:=v_line+10;
			INSERT
			INTO C_INVOICELINE
				(
				C_InvoiceLine_ID, 
				AD_Client_ID, 
				AD_Org_ID, 
				IsActive,
				CreatedBy, 
				UpdatedBy,
				C_Invoice_ID, 
				C_OrderLine_ID,  
				Line,
				Description, 
				M_Product_ID, 
				QtyInvoiced, 
				PriceList,
				PriceActual, 
				PriceLimit, 
				LineNetAmt, 
				C_UOM_ID,
				C_Tax_ID,  --MODIFIED BY F.IRIAZABAL
				--QuantityOrder, 
				M_Product_Uom_ID, 
				PriceStd,
				m_attributesetinstance_id, 
				taxbaseamt,
				em_compra_contenedor_id
				)
				VALUES
				(
				GET_UUID(), --C_InvoiceLine_ID, 
				cur_desgcont.AD_Client_ID,--AD_Client_ID, 
				cur_desgcont.AD_Org_ID,--AD_Org_ID, 
				'Y',--IsActive,
				v_User,--CreatedBy, 
				v_User,--UpdatedBy,
				v_Record_ID,--C_Invoice_ID,  
				cur_desgcont.c_orderline_id,--C_OrderLine_ID, 
				v_line,--Line,
				'Generado del embarque '||v_embarque,--Description, 
				cur_desgcont.m_product_id,--M_Product_ID, 
				cur_desgcont.cantidad,--QtyInvoiced, 
				cur_desgcont.pricelist,--PriceList,
				cur_desgcont.priceactual,--PriceActual, 
				cur_desgcont.pricelimit,--PriceLimit, 
				cur_desgcont.priceactual*cur_desgcont.cantidad,--LineNetAmt, 
				cur_desgcont.c_uom_id,--C_UOM_ID,
				cur_desgcont.c_tax_id,--C_Tax_ID,  --MODIFIED BY F.IRIAZABAL
				-- cur_desgcont.cantidad,--QuantityOrder, 
				cur_desgcont.m_product_uom_id,--M_Product_Uom_ID, 
				cur_desgcont.pricestd,--PriceStd,
				cur_desgcont.m_attributesetinstance_id,--m_attributesetinstance_id, 
				cur_desgcont.taxbaseamt,--taxbaseamt
				cur_contenedor.compra_contenedor_id--em_compra_contenedor_id
			);

		END IF;
            END LOOP;--cur_desgcont

       END LOOP;--cur_contenedor

            IF(p_PInstance_ID IS NOT NULL) THEN
  --  Update AD_PInstance
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished - ' || v_Message) ;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
END IF;

      END; --BODY
    EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
     v_ResultStr:= '@ERROR=' || SQLERRM;
      DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
      IF(p_PInstance_ID IS NOT NULL) THEN
        ROLLBACK;
        AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
      ELSE
        RAISE;
      END IF;
      p_Invoice_ID:=0; -- Error Indicator
      RETURN;
END COMPRA_INVOICE_CREATE
]]></body>
    </function>
  </database>
