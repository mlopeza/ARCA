<?xml version="1.0"?>
  <database name="FUNCTION COMPRA_ENTRADA_CONTENEDOR">
    <function name="COMPRA_ENTRADA_CONTENEDOR" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * Creado por Homero Hernandez Barrera para Tegik
  * Procedimiento que carga entrada de productos a partir de un packing list
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(52000):='';
  v_Message VARCHAR2(52000):='';
  v_Record_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;
    -- Parameter Variables
 
  cur_InOut  RECORD;
  cur_Linea  RECORD;
  v_producto VARCHAR(32);
  v_variable NUMBER;
  v_user VARCHAR(32);
  v_locator VARCHAR(32);
  v_uuid VARCHAR(32);
	v_uom VARCHAR(32);
  v_cantidad NUMBER;
  v_Secuencia NUMBER;


  BEGIN

    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
  
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date, 
        i.AD_USER_ID
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_user =  Cur_Parameter.AD_USER_ID;
      /*IF (Cur_Parameter.parametername LIKE 'producto') THEN
		v_producto := Cur_Parameter.P_String;
      END IF;*/
    END LOOP; -- Get Parameter
    -- Read Information from Record

			--RAISE_APPLICATION_ERROR(-20000, v_producto);

	SELECT * INTO cur_InOut FROM M_Inout WHERE M_Inout_id = v_Record_ID;

	v_variable = 1;
	v_Secuencia = 10;
	
	WHILE v_variable <> 0 LOOP
	
		SELECT m_product_id INTO v_producto FROM compra_packinglist 
		WHERE compra_contenedor_id = cur_InOut.EM_Compra_Contenedordf_ID
		AND m_product_id NOT IN (SELECT m_product_id FROM m_inoutline WHERE m_inout_id = v_Record_ID)
		LIMIT 1;

		SELECT l.m_locator_id INTO v_locator FROM compra_contenedor c
		INNER JOIN m_locator l ON l.m_warehouse_id = c.m_warehouse_id
		WHERE c.compra_contenedor_id = cur_InOut.EM_Compra_Contenedordf_ID
		AND l.isdefault = 'Y'
		LIMIT 1;
	

		IF(v_locator IS NULL OR CHAR_LENGTH(v_locator) <> 32) THEN
			RAISE_APPLICATION_ERROR(-20000,'No hay ningún hueco por defecto en el almacén.');
		END IF;

		IF(v_producto IS NULL OR CHAR_LENGTH(v_producto) <> 32) THEN
			v_variable = 0;
		ELSE
			
			SELECT c_uom_id INTO v_uom FROM M_Product WHERE m_product_id = v_producto;
			
			SELECT SUM(quantity) INTO v_cantidad FROM compra_packinglist
			WHERE compra_contenedor_id = cur_InOut.EM_Compra_Contenedordf_ID
			AND m_product_id = v_producto;
		
			SELECT get_uuid() INTO v_uuid FROM DUAL;
		
			INSERT INTO m_inoutline(
			m_inoutline_id,
			ad_client_id,
			ad_org_id,
			isactive,
			created,
			createdby,
			updated,
			updatedby,
			m_inout_id,
			line,
			m_product_id,
			m_attributesetinstance_id,
			EM_Almac_Movementqty,
			c_uom_id,
			m_locator_id,
			EM_COMPRA_CONTENEDOR_ID,
			em_almac_preciom2
			)
			VALUES (
			v_uuid,--m_inoutline_id,
			cur_InOut.ad_client_id,--ad_client_id,
			cur_InOut.ad_org_id,--ad_org_id,
			cur_InOut.isactive,--isactive,
			now(),--created,
			v_user,--createdby,
			now(),--updated,
			v_user,--updatedby,
			v_Record_ID,--m_inout_id,
			v_Secuencia,--line,
			v_producto,--m_product_id,
			NULL,--m_attributesetinstance_id,
			v_cantidad,--EM_Almac_Movementqty,
			v_uom,--c_uom_id,
			v_locator,--m_locator_id	
			cur_InOut.EM_Compra_Contenedordf_ID,
			--Se agrego por mientras ya que no se habia contemplado esta actualizacion.
			(select costo_pieza from compra_packinglist where m_product_id = v_producto and compra_contenedor_id =cur_InOut.EM_Compra_Contenedordf_ID LIMIT 1)
			);
		
			FOR cur_Linea IN
			(SELECT *
				FROM compra_packinglist pl
				WHERE pl.M_Product_ID=v_producto
				AND compra_contenedor_id = cur_InOut.EM_Compra_Contenedordf_ID)
			LOOP

				INSERT INTO almac_distrib(
				almac_distrib_id,
				ad_client_id,
				ad_org_id,
				isactive,
				created,
				createdby,
				updated,
				updatedby,
				movementqty,
				m_attributesetinstance_id,
				m_inoutline_id,
				name,
				m_product_id,
				m_locator_id,
				ancho,
				alto,
				compra_contenedor_id,
				generarconsecutivo,
				costo_pieza
				)
				VALUES (
				get_uuid(),--compra_packinglist_id,
				cur_Linea.ad_client_id,--ad_client_id,
				cur_Linea.ad_org_id,--ad_org_id,
				cur_Linea.isactive,--isactive,
				now(), --created,
				v_user,--createdby,
				now(), --updated,
				v_user,--updatedby,
				cur_Linea.quantity,--movementqty,
				cur_Linea.m_attributesetinstance_id,--m_attributesetinstance_id,
				v_uuid,--m_inoutline_id,
				NULL,--name,
				v_producto,--m_product_id,
				v_locator,--m_locator_id,
				cur_Linea.ancho,--ancho,
				cur_Linea.alto,--alto
				cur_InOut.EM_Compra_Contenedordf_ID,
				'N',
				cur_Linea.costo_pieza
				);
			
			END LOOP;
		END IF;

		v_Secuencia = v_Secuencia + 10;
	END LOOP;
   
     --FINISH_PROCESS
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, 'Se asignó la mercancía correctamente');
  
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END COMPRA_ENTRADA_CONTENEDOR
]]></body>
    </function>
  </database>
