<?xml version="1.0"?>
  <database name="FUNCTION COMPRA_ASIGNARMASIVO">
    <function name="COMPRA_ASIGNARMASIVO" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
  * The contents of this file are subject to the Compiere Public
  * License 1.1 ("License"); You may not use this file except in
  * compliance with the License. You may obtain a copy of the License in
  * the legal folder of your Openbravo installation.
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  * implied. See the License for the specific language governing rights
  * and limitations under the License.
  * The Original Code is  Compiere  ERP &  Business Solution
  * The Initial Developer of the Original Code is Jorg Janke and ComPiere, Inc.
  * Portions created by Jorg Janke are Copyright (C) 1999-2001 Jorg Janke,
  * parts created by ComPiere are Copyright (C) ComPiere, Inc.;
  * All Rights Reserved.
  * Contributor(s): Openbravo SLU
  * Contributions are Copyright (C) 2001-2008 Openbravo, S.L.U.
  *
  * Specifically, this derivative work is based upon the following Compiere
  * file and version.
  *************************************************************************
  * $Id: C_Invoice_CreateReceipt.sql,v 1.2 2002/05/22 02:48:28 jjanke Exp $
  ***
  * Title: Create Receipt (Shipment) From Invoice
  * Description:
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(52000):='';
  v_Message VARCHAR2(52000):='';
  v_Record_ID VARCHAR2(32);
  -- Parameter
  TYPE RECORD IS REF CURSOR;
    Cur_Parameter RECORD;
    -- Parameter Variables
  v_inicial NUMBER;
  v_final NUMBER;
  v_numero NUMBER;
  v_cantidad NUMBER;
  v_prefijo VARCHAR(10);
  v_atributo VARCHAR(255);
  cur_inoutline  RECORD;
  v_mensaje VARCHAR(50000):='';
  array_len NUMBER;
  v_lista VARCHAR(50000);
  lista_valores VARCHAR(255)[];
  v_tileoslab VARCHAR(10);
  v_alto NUMBER;
  v_ancho NUMBER;
  v_m2 NUMBER;
  v_variable NUMBER;
  v_user VARCHAR(32);
  BEGIN

    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
  
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date, 
        i.AD_USER_ID
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_user =  Cur_Parameter. AD_USER_ID;
      IF (Cur_Parameter.parametername LIKE 'cantidad') THEN
		v_cantidad := Cur_Parameter.p_number;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'alto') THEN
		v_alto := Cur_Parameter.p_number;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'ancho') THEN
		v_ancho := Cur_Parameter.p_number;
      END IF;
      IF (Cur_Parameter.parametername LIKE 'm2') THEN
		v_m2 := Cur_Parameter.p_number;
      END IF;
    END LOOP; -- Get Parameter
    -- Read Information from Record

	SELECT EM_DMPROD_TILEOSLAB INTO v_tileoslab FROM M_PRODUCT WHERE M_PRODUCT_ID IN (SELECT M_PRODUCT_ID FROM M_INOUTLINE WHERE M_INOUTLINE_ID = v_Record_ID);

	SELECT * INTO cur_inoutline FROM M_INOUTLINE WHERE M_INOUTLINE_ID = v_Record_ID;
	
        v_variable = 1;
        
	WHILE v_variable <= v_cantidad LOOP
		
		IF (v_tileoslab = 'Tile') THEN
		
			IF (v_m2 IS NULL) THEN
				RAISE_APPLICATION_ERROR(-20000, 'Los metros cuadrados no pueden estar vacíos');
			END IF;
			
			INSERT INTO almac_distrib(
				almac_distrib_id, ad_client_id, ad_org_id, isactive, created, 
				createdby, updated, updatedby, movementqty, m_attributesetinstance_id, 
				m_inoutline_id, "name", m_product_id, m_locator_id, ancho,
				alto)
			VALUES (GET_UUID(), cur_inoutline.ad_client_id, cur_inoutline.ad_org_id, cur_inoutline.isactive, now(), 
				v_user, now(), v_user, v_m2, NULL, 
				cur_inoutline.m_inoutline_id, NULL, cur_inoutline.m_product_id, cur_inoutline.m_locator_id, 0,
				0);
			
		END IF;

		IF (v_tileoslab = 'Slab') THEN

			IF (v_ancho IS NULL OR v_alto IS NULL) THEN
				RAISE_APPLICATION_ERROR(-20000, 'El alto y el ancho no deben de quedar vacíos');
			END IF;

			INSERT INTO almac_distrib(
				almac_distrib_id, ad_client_id, ad_org_id, isactive, created, 
				createdby, updated, updatedby, movementqty, m_attributesetinstance_id, 
				m_inoutline_id, "name", m_product_id, m_locator_id, ancho,
				alto)
			VALUES (GET_UUID(), cur_inoutline.ad_client_id, cur_inoutline.ad_org_id, cur_inoutline.isactive, now(), 
				v_user, now(), v_user, NULL, NULL, 
				cur_inoutline.m_inoutline_id, NULL, cur_inoutline.m_product_id, cur_inoutline.m_locator_id, v_ancho,
				v_alto);
		END IF;

		
		v_variable = v_variable + 1;
	END LOOP;
   
     --FINISH_PROCESS
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, 'Se asignó la mercancía correctamente');
  
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END COMPRA_ASIGNARMASIVO
]]></body>
    </function>
  </database>
