<?xml version="1.0"?>
  <database name="FUNCTION COMPRA_INOUT_CREATE">
    <function name="COMPRA_INOUT_CREATE" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_invoice_id" type="VARCHAR" mode="out">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
 
  *************************************************************************
  * $Id: compra_invoice_create.sql,v 1.12 2011/10/26 06:49:27 csalinas TEGIK $
  ***
  * Title: Create inout de compra para arca
  ************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_User VARCHAR2(32);
  v_line numeric=0;
  Cur_Parameter RECORD;
   v_Result NUMBER:=1; -- Success
    -- Order Lines not invoiced   Invoice Rule: Immediate
    
v_embarque_id VARCHAR(32); 
cur_contenedor  RECORD;
cur_desgcont  RECORD;
v_embarque VARCHAR (255);
v_contenedor VARCHAR(32);
cur_mercancia RECORD; 
v_linea NUMBER;
v_invoiceline VARCHAR(32);
v_locator VARCHAR(32);
    
   BEGIN
    IF(p_PInstance_ID IS NOT NULL) THEN
      --  Update AD_PInstance
      DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
      v_ResultStr:='PInstanceNotFound';
      AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
      -- Get Parameters
      v_ResultStr:='ReadingParameters';
      FOR Cur_Parameter IN
        (SELECT i.Record_ID,
          i.AD_User_ID,
          p.ParameterName,
          p.P_String,
          p.P_Number,
          p.P_Date
        FROM AD_PINSTANCE i
        LEFT JOIN AD_PINSTANCE_PARA p
          ON i.AD_PInstance_ID=p.AD_PInstance_ID
        WHERE i.AD_PInstance_ID=p_PInstance_ID
        ORDER BY p.SeqNo
        )
      LOOP
        v_Record_ID:=Cur_Parameter.Record_ID;
        v_User:=Cur_Parameter.AD_User_ID;
        IF (Cur_Parameter.ParameterName='contenedor') THEN
		v_contenedor:=Cur_Parameter.P_String;
	END IF;
      END LOOP; -- Get Parameter
    ELSE
      v_Record_ID:=p_Order_ID;
      SELECT CREATEDBY INTO v_User  FROM C_ORDER  WHERE C_ORDER_ID=p_Order_ID;
    END IF;
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
  BEGIN --BODY

  v_linea = 10;

  SELECT EM_COMPRA_CONTENEDOR_ID INTO v_contenedor FROM M_INOUT WHERE M_INOUT_ID = v_Record_ID;

  SELECT M_LOCATOR_ID INTO v_locator FROM M_LOCATOR WHERE M_WAREHOUSE_ID IN (SELECT M_WAREHOUSE_ID FROM M_INOUT WHERE M_INOUT_ID = v_Record_ID) ORDER BY ISDEFAULT DESC LIMIT 1;

  FOR cur_mercancia IN
  (SELECT OL.*, DC.CANTIDAD, C.DOCUMENTNO,
	COALESCE(
	(SELECT SUM(MOVEMENTQTY) 
	FROM M_INOUTLINE IOL
	INNER JOIN M_INOUT IO ON IOL.M_INOUT_ID = IO.M_INOUT_ID
	WHERE C_ORDERLINE_ID = OL.C_ORDERLINE_ID 
	AND IOL.EM_COMPRA_CONTENEDOR_ID = DC.COMPRA_CONTENEDOR_ID 
	AND ISSOTRX = 'N' 
	AND DOCSTATUS IN ('DR','CO'))
	,0) AS CANTIDADUSADA
  FROM COMPRA_DESGCONT DC
  INNER JOIN C_ORDERLINE OL ON OL.C_ORDERLINE_ID = DC.C_ORDERLINE_ID AND DC.COMPRA_CONTENEDOR_ID = v_contenedor
  INNER JOIN COMPRA_CONTENEDOR C ON DC.COMPRA_CONTENEDOR_ID = C.COMPRA_CONTENEDOR_ID
  WHERE C.COMPRA_CONTENEDOR_ID IN (SELECT IL.EM_COMPRA_CONTENEDOR_ID FROM C_INVOICELINE IL WHERE IL.C_INVOICE_ID IN (SELECT I.C_INVOICE_ID FROM C_INVOICE I WHERE DOCSTATUS IN ('CO') AND ISSOTRX = 'N'))
  AND OL.C_ORDERLINE_ID IN (SELECT IL.C_ORDERLINE_ID FROM C_INVOICELINE IL WHERE IL.C_INVOICE_ID IN (SELECT I.C_INVOICE_ID FROM C_INVOICE I WHERE DOCSTATUS IN ('CO') AND ISSOTRX = 'N')))
  LOOP

	SELECT C_INVOICELINE_ID INTO v_invoiceline
	FROM C_INVOICELINE IL
	INNER JOIN C_INVOICE I ON IL.C_INVOICE_ID = I.C_INVOICE_ID AND DOCSTATUS = 'CO' AND EM_COMPRA_CONTENEDOR_ID = v_contenedor AND C_ORDERLINE_ID = cur_mercancia.C_ORDERLINE_ID;
	
	IF (cur_mercancia.CANTIDAD - cur_mercancia.CANTIDADUSADA > 0) THEN

		INSERT INTO m_inoutline(
			m_inoutline_id, ad_client_id, ad_org_id, isactive, createdby, 
			updatedby, line, description, m_inout_id, c_orderline_id, 
			m_locator_id, m_product_id, c_uom_id, movementqty, isinvoiced, 
			em_compra_contenedor_id, em_compra_il_id, em_almac_movementqty)
		VALUES (GET_UUID(), cur_mercancia.AD_CLIENT_ID, cur_mercancia.AD_ORG_ID, cur_mercancia.ISACTIVE, v_User, 
			v_User, v_linea, 'MercancÃ­a creada desde el contenedor: ' || cur_mercancia.DOCUMENTNO, v_Record_ID, cur_mercancia.C_ORDERLINE_ID, 
			v_locator, cur_mercancia.M_PRODUCT_ID, cur_mercancia.C_UOM_ID, 0, 'Y',
			v_contenedor, v_invoiceline, cur_mercancia.CANTIDAD - cur_mercancia.CANTIDADUSADA);
			
		v_linea = v_linea + 10;
	END IF;
	
  END LOOP;

            IF(p_PInstance_ID IS NOT NULL) THEN
  --  Update AD_PInstance
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished - ' || v_Message) ;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', v_Result, v_Message) ;
END IF;

      END; --BODY
    EXCEPTION
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
     v_ResultStr:= '@ERROR=' || SQLERRM;
      DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
      IF(p_PInstance_ID IS NOT NULL) THEN
        ROLLBACK;
        AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
      ELSE
        RAISE;
      END IF;
      p_Invoice_ID:=0; -- Error Indicator
      RETURN;
END COMPRA_INOUT_CREATE
]]></body>
    </function>
  </database>
